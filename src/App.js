import React, { useState, useEffect, useRef } from 'react';
import {
  Download,
  FileText,
  Table,
  Home,
  Loader2,
  CheckCircle,
  AlertCircle,
  Copy,
  PlusCircle,
  Trash2,
  Upload,
  Info,
  Sparkles,
  RotateCcw,
  FileCode,
  Send,
  LayoutTemplate,
  Settings,
  ChevronDown
} from 'lucide-react';

// #region CONSTANTS & DATA
// ============================================================================

// Leeres Formular-Grundgerüst
const blankFormData = {
    senderName: '',
    senderStreet: '',
    senderZip: '',
    senderCity: '',
    senderCountry: 'DE',
    senderTaxId: '',
    senderContactName: '',
    senderContactPhone: '',
    senderContactEmail: '',
    senderElectronicAddress: '',
    recipientName: '',
    recipientStreet: '',
    recipientZip: '',
    recipientCity: '',
    recipientCountry: 'DE',
    recipientElectronicAddress: '',
    leitwegId: '',
    reference: '',
    invoiceDate: new Date().toISOString().slice(0, 10),
    serviceDate: new Date().toISOString().slice(0, 10),
    iban: '',
    bic: '',
    invoiceTypeCode: '380',
    invoiceCurrencyCode: 'EUR',
    paymentTerms: '',
    paymentMeansCode: '30',
    taxRate: '19',
    lineItems: [
        { id: 1, name: '', unitCode: 'XPP', billedQuantity: '1', netAmount: '0.00', price: '0.00' }
    ],
    totalNetAmount: '0.00',
    totalTaxAmount: '0.00',
    grossAmount: '0.00',
    // Neue optionale Felder
    orderReference: '',
    contractReference: '',
    precedingInvoiceReference: '',
    paymentDueDate: '',
    documentLevelAllowance: '',
    documentLevelCharge: '',
};

// Erweiterte Mapping-Daten für E-Rechnungs-Standards (EN 16931 + XRechnung + ZUGFeRD)
const eRechnungMappingData = [
    // === PFLICHTFELDER (Mandatory) ===
    { id: 1, btId: 'BT-1', en16931: 'Invoice number', description: 'Rechnungsnummer', xrechnungPath: 'cbc:ID', zugferdPath: 'rsm:ExchangedDocument/ram:ID', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 2, btId: 'BT-2', en16931: 'Invoice issue date', description: 'Rechnungsdatum', xrechnungPath: 'cbc:IssueDate', zugferdPath: 'rsm:ExchangedDocument/ram:IssueDateTime', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 3, btId: 'BT-3', en16931: 'Invoice type code', description: 'Rechnungstyp', xrechnungPath: 'cbc:InvoiceTypeCode', zugferdPath: 'rsm:ExchangedDocument/ram:TypeCode', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 4, btId: 'BT-5', en16931: 'Invoice currency code', description: 'Währung', xrechnungPath: 'cbc:DocumentCurrencyCode', zugferdPath: '.../ram:InvoiceCurrencyCode', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 5, btId: 'BT-10', en16931: 'Buyer reference', description: 'Leitweg-ID', xrechnungPath: 'cbc:BuyerReference', zugferdPath: '.../ram:BuyerReference', mandatory: true, formats: ['XRechnung'], xrechnungSpecific: true },
    { id: 6, btId: 'BT-27', en16931: 'Seller name', description: 'Name des Verkäufers', xrechnungPath: 'cac:AccountingSupplierParty/.../cbc:Name', zugferdPath: '.../ram:SellerTradeParty/ram:Name', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 7, btId: 'BT-31', en16931: 'Seller VAT identifier', description: 'USt-IdNr. des Verkäufers', xrechnungPath: '.../PartyTaxScheme/cbc:CompanyID', zugferdPath: '.../ram:SpecifiedTaxRegistration/ram:ID', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 8, btId: 'BT-40', en16931: 'Seller country code', description: 'Land des Verkäufers', xrechnungPath: '.../Country/cbc:IdentificationCode', zugferdPath: '.../ram:PostalTradeAddress/ram:CountryID', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 9, btId: 'BT-44', en16931: 'Buyer name', description: 'Name des Käufers', xrechnungPath: 'cac:AccountingCustomerParty/.../cbc:Name', zugferdPath: '.../ram:BuyerTradeParty/ram:Name', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 10, btId: 'BT-55', en16931: 'Buyer country code', description: 'Land des Käufers', xrechnungPath: '.../Country/cbc:IdentificationCode', zugferdPath: '.../ram:PostalTradeAddress/ram:CountryID', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 11, btId: 'BT-126', en16931: 'Invoice line identifier', description: 'Positionsnummer', xrechnungPath: '.../InvoiceLine/cbc:ID', zugferdPath: '.../ram:AssociatedDocumentLineDocument/ram:LineID', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'], autoGenerated: true },
    { id: 12, btId: 'BT-129', en16931: 'Invoiced quantity', description: 'Menge der Position', xrechnungPath: '.../cbc:InvoicedQuantity', zugferdPath: '.../ram:BilledQuantity', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 13, btId: 'BT-146', en16931: 'Item net price', description: 'Preis der Position', xrechnungPath: '.../Price/cbc:PriceAmount', zugferdPath: '.../ram:GrossPriceProductTradePrice/ram:ChargeAmount', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 14, btId: 'BT-153', en16931: 'Item name', description: 'Artikelname der Position', xrechnungPath: '.../Item/cbc:Name', zugferdPath: '.../ram:SpecifiedTradeProduct/ram:Name', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },

    // === AUTOMATISCH BERECHNETE FELDER ===
    { id: 15, btId: 'BT-106', en16931: 'Sum of Invoice line net amount', description: 'Summe Nettobeträge Positionen', xrechnungPath: '.../LegalMonetaryTotal/cbc:LineExtensionAmount', zugferdPath: '.../ram:GrandTotalAmount', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'], autoCalculated: true },
    { id: 16, btId: 'BT-109', en16931: 'Invoice total amount without VAT', description: 'Rechnungsnettobetrag', xrechnungPath: '.../LegalMonetaryTotal/cbc:TaxExclusiveAmount', zugferdPath: '.../ram:TaxBasisTotalAmount', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'], autoCalculated: true },
    { id: 17, btId: 'BT-110', en16931: 'Invoice total VAT amount', description: 'Gesamtsteuerbetrag', xrechnungPath: '.../TaxTotal/cbc:TaxAmount', zugferdPath: '.../ram:TaxTotalAmount[@currencyID]', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'], autoCalculated: true },
    { id: 18, btId: 'BT-112', en16931: 'Invoice total amount with VAT', description: 'Rechnungsbruttobetrag', xrechnungPath: '.../LegalMonetaryTotal/cbc:TaxInclusiveAmount', zugferdPath: '.../ram:GrandTotalAmount', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'], autoCalculated: true },
    { id: 19, btId: 'BT-115', en16931: 'Amount due for payment', description: 'Zu zahlender Betrag', xrechnungPath: '.../LegalMonetaryTotal/cbc:PayableAmount', zugferdPath: '.../ram:DuePayableAmount', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'], autoCalculated: true },
    { id: 20, btId: 'BT-131', en16931: 'Invoice line net amount', description: 'Nettobetrag der Position', xrechnungPath: '.../cbc:LineExtensionAmount', zugferdPath: '.../ram:SpecifiedTradeSettlementLineMonetarySummation/ram:LineTotalAmount', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'], autoCalculated: true },

    // === ZAHLUNGS- UND STEUERFELDER (jetzt mandatory da eigener Block) ===
    { id: 21, btId: 'BT-20', en16931: 'Payment terms', description: 'Zahlungsbedingungen', xrechnungPath: 'cac:PaymentTerms/cbc:Note', zugferdPath: '.../ram:ApplicableTradePaymentTerms/ram:Description', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'], defaultValue: 'Zahlbar innerhalb von 30 Tagen' },
    { id: 22, btId: 'BT-81', en16931: 'Payment means type code', description: 'Zahlungsart (Code)', xrechnungPath: '.../PaymentMeans/cbc:PaymentMeansCode', zugferdPath: '.../ram:PaymentMeansCode', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'], defaultValue: '58' },
    { id: 23, btId: 'BT-84', en16931: 'Payment account identifier', description: 'IBAN', xrechnungPath: '.../PayeeFinancialAccount/cbc:ID', zugferdPath: '.../ram:PayeePartyCreditorFinancialAccount/ram:IBANID', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 24, btId: 'BT-86', en16931: 'Payment service provider identifier', description: 'BIC / SWIFT-Code', xrechnungPath: '.../FinancialInstitutionBranch/cbc:ID', zugferdPath: '.../ram:PayeePartyCreditorFinancialAccount/ram:ProprietaryID', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 25, btId: 'BT-152', en16931: 'Invoiced item VAT rate', description: 'Steuersatz der Position (%)', xrechnungPath: '.../cbc:Percent', zugferdPath: '.../ram:ApplicableTradeTax/ram:RateApplicablePercent', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'], defaultValue: '19' },

    // === OPTIONALE FELDER MIT DEFAULTS ===
    { id: 26, btId: 'BT-130', en16931: 'Invoiced quantity unit of measure code', description: 'Einheit der Position', xrechnungPath: '.../cbc:InvoicedQuantity/@unitCode', zugferdPath: '.../ram:BilledQuantity/@unitCode', mandatory: false, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'], defaultValue: 'XPP' },

    // === FELDER DIE NACH OBEN VERSCHOBEN WURDEN (jetzt mandatory) ===
    { id: 28, btId: 'BT-35', en16931: 'Seller address line 1', description: 'Straße des Verkäufers', xrechnungPath: '.../PostalAddress/cbc:StreetName', zugferdPath: '.../ram:PostalTradeAddress/ram:LineOne', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 29, btId: 'BT-37', en16931: 'Seller city', description: 'Ort des Verkäufers', xrechnungPath: '.../PostalAddress/cbc:CityName', zugferdPath: '.../ram:PostalTradeAddress/ram:CityName', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 30, btId: 'BT-38', en16931: 'Seller post code', description: 'PLZ des Verkäufers', xrechnungPath: '.../PostalAddress/cbc:PostalZone', zugferdPath: '.../ram:PostalTradeAddress/ram:PostcodeCode', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 31, btId: 'BT-50', en16931: 'Buyer address line 1', description: 'Straße des Käufers', xrechnungPath: '.../PostalAddress/cbc:StreetName', zugferdPath: '.../ram:PostalTradeAddress/ram:LineOne', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 32, btId: 'BT-52', en16931: 'Buyer city', description: 'Ort des Käufers', xrechnungPath: '.../PostalAddress/cbc:CityName', zugferdPath: '.../ram:PostalTradeAddress/ram:CityName', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 33, btId: 'BT-53', en16931: 'Buyer post code', description: 'PLZ des Käufers', xrechnungPath: '.../PostalAddress/cbc:PostalZone', zugferdPath: '.../ram:PostalTradeAddress/ram:PostcodeCode', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 34, btId: 'BT-72', en16931: 'Actual delivery date', description: 'Liefer-/Leistungsdatum', xrechnungPath: 'cac:Delivery/cbc:ActualDeliveryDate', zugferdPath: '.../ram:ActualDeliverySupplyChainEvent/ram:OccurrenceDateTime', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 35, btId: 'BT-9', en16931: 'Payment due date', description: 'Fälligkeitsdatum', xrechnungPath: 'cbc:DueDate', zugferdPath: '.../ram:DueDateDateTime', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 36, btId: 'BT-12', en16931: 'Contract reference', description: 'Vertragsreferenz', xrechnungPath: 'cac:ContractDocumentReference/cbc:ID', zugferdPath: '.../ram:ContractReferencedDocument/ram:IssuerAssignedID', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { id: 37, btId: 'BT-13', en16931: 'Purchase order reference', description: 'Bestellreferenz', xrechnungPath: 'cac:OrderReference/cbc:ID', zugferdPath: '.../ram:BuyerOrderReferencedDocument/ram:IssuerAssignedID', mandatory: true, formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },

    // === WIRKLICH OPTIONALE FELDER ===
    { id: 38, btId: 'BT-34', en16931: 'Seller electronic address', description: 'Elektronische Adresse (Verkäufer)', xrechnungPath: '.../Party/cbc:EndpointID', zugferdPath: '.../ram:URIUniversalCommunication/ram:URIID', mandatory: false, formats: ['XRechnung'] },
    { id: 39, btId: 'BT-41', en16931: 'Seller contact point', description: 'Kontaktpunkt des Verkäufers', xrechnungPath: '.../Contact/cbc:Name', zugferdPath: '.../ram:DefinedTradeContact/ram:PersonName', mandatory: false, formats: ['XRechnung', 'ZUGFeRD'] },
    { id: 40, btId: 'BT-42', en16931: 'Seller contact telephone number', description: 'Telefon des Verkäufers', xrechnungPath: '.../Contact/cbc:Telephone', zugferdPath: '.../ram:DefinedTradeContact/ram:TelephoneUniversalCommunication/ram:CompleteNumber', mandatory: false, formats: ['XRechnung', 'ZUGFeRD'] },
    { id: 41, btId: 'BT-43', en16931: 'Seller contact email address', description: 'E-Mail des Verkäufers', xrechnungPath: '.../Contact/cbc:ElectronicMail', zugferdPath: '.../ram:DefinedTradeContact/ram:EmailURIUniversalCommunication/ram:URIID', mandatory: false, formats: ['XRechnung', 'ZUGFeRD'] },
    { id: 42, btId: 'BT-49', en16931: 'Buyer electronic address', description: 'Elektronische Adresse (Käufer)', xrechnungPath: '.../Party/cbc:EndpointID', zugferdPath: '.../ram:URIUniversalCommunication/ram:URIID', mandatory: false, formats: ['XRechnung'] },

    // === ERWEITERTE OPTIONALE FELDER ===
    { id: 43, btId: 'BT-25', en16931: 'Preceding Invoice reference', description: 'Vorherige Rechnungsreferenz', xrechnungPath: 'cac:BillingReference/cac:InvoiceDocumentReference/cbc:ID', zugferdPath: '.../ram:InvoiceReferencedDocument/ram:IssuerAssignedID', mandatory: false, formats: ['EN16931', 'XRechnung'] },
    { id: 44, btId: 'BT-92', en16931: 'Document level allowance amount', description: 'Rabatt auf Dokumentenebene', xrechnungPath: 'cac:AllowanceCharge/cbc:Amount', zugferdPath: '.../ram:SpecifiedTradeAllowanceCharge/ram:ActualAmount', mandatory: false, formats: ['EN16931', 'XRechnung'] },
    { id: 45, btId: 'BT-99', en16931: 'Document level charge amount', description: 'Zuschlag auf Dokumentenebene', xrechnungPath: 'cac:AllowanceCharge/cbc:Amount', zugferdPath: '.../ram:SpecifiedTradeAllowanceCharge/ram:ActualAmount', mandatory: false, formats: ['EN16931', 'XRechnung'] }
].sort((a, b) => parseInt(a.btId.substring(3)) - parseInt(b.btId.substring(3)));

// Verfügbare Platzhalter mit Kategorien für intelligente Verwaltung
// eslint-disable-next-line no-unused-vars
const availablePlaceholders = {
  rechnungsdaten: [
    { key: 'invoiceDate', label: 'Rechnungsdatum', example: '2025-01-15' },
    { key: 'reference', label: 'Rechnungsnummer', example: 'RE-2025-001' },
    { key: 'serviceDate', label: 'Leistungsdatum', example: '2025-01-15' },
    { key: 'invoiceTypeCode', label: 'Rechnungstyp', example: '380' },
    { key: 'invoiceCurrencyCode', label: 'Währung', example: 'EUR' },
    { key: 'totalNetAmount', label: 'Nettobetrag', example: '1000.00' },
    { key: 'totalTaxAmount', label: 'Steuerbetrag', example: '190.00' },
    { key: 'grossAmount', label: 'Bruttobetrag', example: '1190.00' },
    { key: 'taxRate', label: 'Steuersatz', example: '19' }
  ],
  sender: [
    { key: 'senderName', label: 'Sendername', example: 'Musterfirma GmbH' },
    { key: 'senderStreet', label: 'Senderstraße', example: 'Hauptstraße 10' },
    { key: 'senderZip', label: 'Sender PLZ', example: '12345' },
    { key: 'senderCity', label: 'Senderort', example: 'Berlin' },
    { key: 'senderCountry', label: 'Senderland', example: 'DE' },
    { key: 'senderTaxId', label: 'Sender Steuernummer', example: 'DE123456789' },
    { key: 'senderContactName', label: 'Sender Kontakt', example: 'Max Mustermann' },
    { key: 'senderContactPhone', label: 'Sender Telefon', example: '+49 30 1234567' },
    { key: 'senderContactEmail', label: 'Sender E-Mail', example: 'max@firma.de' }
  ],
  empfaenger: [
    { key: 'recipientName', label: 'Empfängername', example: 'Kunde AG' },
    { key: 'recipientStreet', label: 'Empfängerstraße', example: 'Beispielweg 5' },
    { key: 'recipientZip', label: 'Empfänger PLZ', example: '67890' },
    { key: 'recipientCity', label: 'Empfängerort', example: 'München' },
    { key: 'recipientCountry', label: 'Empfängerland', example: 'DE' },
    { key: 'leitwegId', label: 'Leitweg-ID', example: '04011000-12345-67' }
  ],
  zahlungsdaten: [
    { key: 'iban', label: 'IBAN', example: 'DE12345678901234567890' },
    { key: 'bic', label: 'BIC', example: 'DEUTDEFFXXX' },
    { key: 'paymentTerms', label: 'Zahlungsbedingungen', example: 'Zahlbar in 30 Tagen' },
    { key: 'paymentMeansCode', label: 'Zahlungsart Code', example: '30' }
  ],
  sap_spezifisch: [
    { key: 'kreditorId', label: 'Kreditorennummer', example: 'K12345' },
    { key: 'buchungskreisId', label: 'Buchungskreis', example: '1000' }
  ],
  erweiterte_felder: [
    { key: 'orderReference', label: 'Bestellreferenz', example: 'PO-2025-001', btId: 'BT-13', formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { key: 'contractReference', label: 'Vertragsreferenz', example: 'CONTRACT-2025-001', btId: 'BT-12', formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { key: 'precedingInvoiceReference', label: 'Vorherige Rechnungsreferenz', example: 'RE-2024-999', btId: 'BT-25', formats: ['EN16931', 'XRechnung'] },
    { key: 'paymentDueDate', label: 'Fälligkeitsdatum', example: '2025-02-15', btId: 'BT-9', formats: ['EN16931', 'XRechnung', 'ZUGFeRD'] },
    { key: 'documentLevelAllowance', label: 'Rabatt auf Dokumentenebene', example: '50.00', btId: 'BT-92', formats: ['EN16931', 'XRechnung'] },
    { key: 'documentLevelCharge', label: 'Zuschlag auf Dokumentenebene', example: '25.00', btId: 'BT-99', formats: ['EN16931', 'XRechnung'] }
  ]
};

// Hierarchische XML-Struktur für SAP-Mapping (basierend auf ursprünglicher Reihenfolge)
const defaultSapMapping = [
  {
    id: 'doc-root',
    type: 'container',
    name: 'DOCUMENT',
    label: 'Segment öffnen (DOCUMENT)',
    level: 0,
    children: [
      {
        id: 'client',
        type: 'field',
        name: 'CLIENT',
        label: 'Client',
        value: '384',
        level: 1,
        dataType: 'string'
      },
      {
        id: 'sender-gln',
        type: 'field',
        name: 'SENDER_GLN',
        label: 'SENDER_GLN',
        value: '12345',
        level: 1,
        dataType: 'string'
      },
      {
        id: 'recipient-gln',
        type: 'field',
        name: 'RECIPIENT_GLN',
        label: 'RECIPIENT_GLN',
        value: '12345',
        level: 1,
        dataType: 'string'
      },
      {
        id: 'settlement-period',
        type: 'field',
        name: 'SETTLEMENT_PERIOD',
        label: 'SETTLEMENT_PERIOD',
        value: '0',
        level: 1,
        dataType: 'string'
      },
      {
        id: 'transmission-type',
        type: 'field',
        name: 'TRANSMISSION_TYPE',
        label: 'TRANSMISSION_TYPE',
        value: 'TEST',
        level: 1,
        dataType: 'string'
      },
      {
        id: 'transmission-cycle',
        type: 'field',
        name: 'TRANSMISSION_CYCLE',
        label: 'TRANSMISSION_CYCLE',
        value: '1',
        level: 1,
        dataType: 'string'
      },
      {
        id: 'doc-header',
        type: 'container',
        name: 'DOCUMENT_HEADER',
        label: 'Segment öffnen (DOCUMENT_HEADER)',
        level: 1,
        children: [
          {
            id: 'archiv-no',
            type: 'field',
            name: 'ARCHIV_NO',
            label: 'ARCHIV_NO',
            value: '123456789',
            level: 2,
            dataType: 'string'
          },
          {
            id: 'doc-info',
            type: 'container',
            name: 'DOCUMENT_INFO',
            label: 'Segment öffnen (DOCUMENT_INFO)',
            level: 2,
            children: [
              {
                id: 'procedure',
                type: 'field',
                name: 'PROCEDURE',
                label: 'PROCEDURE',
                value: 'XML',
                level: 3,
                dataType: 'string'
              },
              {
                id: 'input-type',
                type: 'field',
                name: 'INPUT_TYPE',
                label: 'INPUT_TYPE',
                value: 'I',
                level: 3,
                dataType: 'string'
              },
              {
                id: 'doc-type',
                type: 'field',
                name: 'DOC_TYPE',
                label: 'DOC_TYPE',
                value: 'DOC_TYPE',
                level: 3,
                dataType: 'string'
              },
              {
                id: 'doc-date-arrival',
                type: 'field',
                name: 'DOC_DATE_ARRIVAL',
                label: 'DOC_DATE_ARRIVAL',
                value: '$TODAY',
                level: 3,
                dataType: 'string'
              },
              {
                id: 'order-delivery-list',
                type: 'container',
                name: 'ORDER_DELIVERY_LIST',
                label: 'Segment öffnen (ORDER_DELIVERY_LIST)',
                level: 3,
                children: [
                  {
                    id: 'order-delivery-item',
                    type: 'container',
                    name: 'ORDER_DELIVERY_ITEM',
                    label: 'Segment öffnen (ORDER_DELIVERY_ITEM)',
                    level: 4,
                    children: []
                  }
                ]
              }
            ]
          },
          {
            id: 'customer-spec',
            type: 'container',
            name: 'CUSTOMER_SPECIFICATION',
            label: 'Segment öffnen (CUSTOMER_SPECIFICATION)',
            level: 2,
            children: [
              {
                id: 'entry-typ',
                type: 'field',
                name: 'ENTRY_TYP',
                label: 'ENTRY_TYP',
                value: 'DOC',
                level: 3,
                dataType: 'string'
              },
              {
                id: 'country',
                type: 'field',
                name: 'COUNTRY',
                label: 'COUNTRY',
                value: 'DE',
                level: 3,
                dataType: 'string'
              }
            ]
          },
          {
            id: 'parties-container',
            type: 'container',
            name: 'PARTIES',
            label: 'Segment öffnen (PARTIES)',
            level: 2,
            children: [
              {
                id: 'party-buyer',
                type: 'container',
                name: 'PARTY',
                label: 'Segment öffnen (party) - Käufer',
                level: 3,
                children: [
                  {
                    id: 'buyer-type',
                    type: 'field',
                    name: 'TYPE',
                    label: 'Käufer Typ',
                    value: 'BUYER',
                    level: 4,
                    dataType: 'string'
                  },
                  {
                    id: 'buyer-name1',
                    type: 'field',
                    name: 'NAME1',
                    label: 'Käufer Name',
                    value: '{{recipientName}}',
                    level: 4,
                    dataType: 'string'
                  },
                  {
                    id: 'buyer-street',
                    type: 'field',
                    name: 'STREET',
                    label: 'Käufer Straße',
                    value: '{{recipientStreet}}',
                    level: 4,
                    dataType: 'string'
                  },
                  {
                    id: 'buyer-country',
                    type: 'field',
                    name: 'COUNTRY',
                    label: 'Käufer Land',
                    value: '{{recipientCountry}}',
                    level: 4,
                    dataType: 'string'
                  },
                  {
                    id: 'buyer-zip',
                    type: 'field',
                    name: 'ZIP',
                    label: 'Käufer PLZ',
                    value: '{{recipientZip}}',
                    level: 4,
                    dataType: 'string'
                  },
                  {
                    id: 'buyer-city',
                    type: 'field',
                    name: 'CITY',
                    label: 'Käufer Ort',
                    value: '{{recipientCity}}',
                    level: 4,
                    dataType: 'string'
                  },
                  {
                    id: 'buyer-vat-id',
                    type: 'field',
                    name: 'VAT_ID',
                    label: 'Käufer USt-IdNr',
                    value: '',
                    level: 4,
                    dataType: 'string'
                  },
                  {
                    id: 'buyer-cust-internal-id',
                    type: 'field',
                    name: 'CUST_INTERNAL_ID',
                    label: 'Käufer Customer Internal ID',
                    value: '{{buchungskreisId}}',
                    level: 4,
                    dataType: 'string'
                  }
                ]
              },
              {
                id: 'party-supplier',
                type: 'container',
                name: 'PARTY',
                label: 'Segment öffnen (party) - Lieferant',
                level: 3,
                children: [
                  {
                    id: 'supplier-type',
                    type: 'field',
                    name: 'TYPE',
                    label: 'Lieferant Typ',
                    value: 'SUPPLIER',
                    level: 4,
                    dataType: 'string'
                  },
                  {
                    id: 'supplier-name1',
                    type: 'field',
                    name: 'NAME1',
                    label: 'Lieferant Name',
                    value: '{{senderName}}',
                    level: 4,
                    dataType: 'string'
                  },
                  {
                    id: 'supplier-street',
                    type: 'field',
                    name: 'STREET',
                    label: 'Lieferant Straße',
                    value: '{{senderStreet}}',
                    level: 4,
                    dataType: 'string'
                  },
                  {
                    id: 'supplier-country',
                    type: 'field',
                    name: 'COUNTRY',
                    label: 'Lieferant Land',
                    value: '{{senderCountry}}',
                    level: 4,
                    dataType: 'string'
                  },
                  {
                    id: 'supplier-zip',
                    type: 'field',
                    name: 'ZIP',
                    label: 'Lieferant PLZ',
                    value: '{{senderZip}}',
                    level: 4,
                    dataType: 'string'
                  },
                  {
                    id: 'supplier-city',
                    type: 'field',
                    name: 'CITY',
                    label: 'Lieferant Ort',
                    value: '{{senderCity}}',
                    level: 4,
                    dataType: 'string'
                  },
                  {
                    id: 'supplier-vat-id',
                    type: 'field',
                    name: 'VAT_ID',
                    label: 'Lieferant USt-IdNr',
                    value: '{{senderTaxId}}',
                    level: 4,
                    dataType: 'string'
                  },
                  {
                    id: 'supplier-cust-internal-id',
                    type: 'field',
                    name: 'CUST_INTERNAL_ID',
                    label: 'Lieferant Customer Internal ID',
                    value: '{{kreditorId}}',
                    level: 4,
                    dataType: 'string'
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        id: 'bank-info',
        type: 'container',
        name: 'BANK_INFO',
        label: 'Segment öffnen (bank_info)',
        level: 1,
        children: [
          {
            id: 'bank-iban',
            type: 'field',
            name: 'BANK_IBAN',
            label: 'IBAN',
            value: '{{iban}}',
            level: 2,
            dataType: 'string'
          },
          {
            id: 'bank-bic',
            type: 'field',
            name: 'BANK_SWIFT_BIC',
            label: 'BIC',
            value: '{{bic}}',
            level: 2,
            dataType: 'string'
          }
        ]
      },
      {
        id: 'payment-info',
        type: 'container',
        name: 'PAYMENT_INFO',
        label: 'Segment öffnen (payment_info)',
        level: 1,
        children: [
          {
            id: 'performance-date',
            type: 'field',
            name: 'PERFORMANCE_DATE_TO',
            label: 'Leistungsdatum',
            value: '{{serviceDate}}',
            level: 2,
            dataType: 'date'
          },
          {
            id: 'document-freetext',
            type: 'container',
            name: 'DOCUMENT_FREETEXT',
            label: 'Segment öffnen (DOCUMENT_FREETEXT)',
            level: 2,
            children: [
              {
                id: 'doc-freetext',
                type: 'container',
                name: 'DOC_FREETEXT',
                label: 'Segment öffnen (DOC_FREETEXT)',
                level: 3,
                children: [
                  {
                    id: 'doc-freetext-id',
                    type: 'field',
                    name: 'DOC_FREETEXT_ID',
                    label: 'DOC_FREETEXT_ID',
                    value: '1',
                    level: 4,
                    dataType: 'string'
                  },
                  {
                    id: 'doc-freetext-txt',
                    type: 'field',
                    name: 'DOC_FREETEXT_TXT',
                    label: 'DOC_FREETEXT_TXT',
                    value: '{{additionalNotes}}',
                    level: 4,
                    dataType: 'string'
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        id: 'doc-footer',
        type: 'container',
        name: 'DOCUMENT_FOOTER',
        label: 'Segment öffnen (document_footer)',
        level: 1,
        children: [
          {
            id: 'doc-summary',
            type: 'container',
            name: 'DOCUMENT_SUMMARY',
            label: 'Segment öffnen (document_summary)',
            level: 2,
            children: [
              {
                id: 'doc-currency',
                type: 'field',
                name: 'DOC_CURRENCY',
                label: 'Währung',
                value: '{{invoiceCurrencyCode}}',
                level: 3,
                dataType: 'string'
              },
              {
                id: 'vat-country',
                type: 'field',
                name: 'VAT_COUNTRY',
                label: 'VAT_COUNTRY',
                value: 'DE',
                level: 3,
                dataType: 'string'
              },
              {
                id: 'total-gross',
                type: 'field',
                name: 'TOTAL_GROSS',
                label: 'Bruttobetrag',
                value: '{{grossAmount}}',
                level: 3,
                dataType: 'currency'
              },
              {
                id: 'total-net',
                type: 'field',
                name: 'TOTAL_NET',
                label: 'Nettobetrag',
                value: '{{totalNetAmount}}',
                level: 3,
                dataType: 'currency'
              },
              {
                id: 'total-vat',
                type: 'field',
                name: 'TOTAL_VAT',
                label: 'MwSt Betrag',
                value: '{{totalTaxAmount}}',
                level: 3,
                dataType: 'currency'
              },
              {
                id: 'total-paym-gross',
                type: 'field',
                name: 'TOTAL_PAYM_GROSS',
                label: 'Gesamtbetrag',
                value: '{{grossAmount}}',
                level: 3,
                dataType: 'currency'
              }
            ]
          },
          {
            id: 'tax-item-list',
            type: 'container',
            name: 'TAX_ITEM_LIST',
            label: 'Segment öffnen (TAX_ITEM_LIST)',
            level: 2,
            children: [
              {
                id: 'tax-item',
                type: 'container',
                name: 'TAX_ITEM',
                label: 'Segment öffnen (TAX_ITEM)',
                level: 3,
                children: [
                  {
                    id: 'net-vat',
                    type: 'field',
                    name: 'NET',
                    label: 'NET',
                    value: '{{totalTaxAmount}}',
                    level: 4,
                    dataType: 'currency',
                    attributes: {
                      'VAT-RATE': '{{taxRate}}'
                    }
                  },
                  {
                    id: 'vat-amount',
                    type: 'field',
                    name: 'VAT',
                    label: 'VAT',
                    value: '{{totalTaxAmount}}',
                    level: 4,
                    dataType: 'currency',
                    attributes: {
                      'VAT-RATE': '{{taxRate}}'
                    }
                  },
                  {
                    id: 'vat-category',
                    type: 'field',
                    name: 'VAT_CATEGORY',
                    label: 'VAT_CATEGORY',
                    value: 'S',
                    level: 4,
                    dataType: 'string'
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        id: 'x-ein',
        type: 'container',
        name: 'X_EIN',
        label: 'Segment öffnen (X_EIN)',
        level: 1,
        children: [
          {
            id: 'countrycode',
            type: 'field',
            name: 'COUNTRYCODE',
            label: 'COUNTRYCODE',
            value: 'DE',
            level: 2,
            dataType: 'string'
          },
          {
            id: 'einv-id',
            type: 'field',
            name: 'EINV_ID',
            label: 'EINV_ID',
            value: 'MVP App',
            level: 2,
            dataType: 'string'
          }
        ]
      }
    ]
  }
];

// #endregion

// #region HELPER COMPONENTS & FUNCTIONS
// ============================================================================

// XML Escape Funktion (muss früh definiert werden)
const escapeXml = (unsafe) => {
  if (typeof unsafe !== 'string') return unsafe;
  return unsafe.replace(/[<>&"']/g, (c) => ({'<': '&lt;', '>': '&gt;', '&': '&amp;', '"': '&quot;', "'": '&apos;'})[c] || c);
};

// Funktion zum automatischen Befüllen von Feldern mit Defaults
const applyFieldDefaults = (formData) => {
    const enhancedData = { ...formData };
    
    // Durchlaufe alle Mapping-Daten und setze Default-Werte
    eRechnungMappingData.forEach(field => {
        if (field.defaultValue && !enhancedData[getFieldNameFromBtId(field.btId)]) {
            const fieldName = getFieldNameFromBtId(field.btId);
            if (fieldName && field.defaultValue !== 'invoiceDate') {
                enhancedData[fieldName] = field.defaultValue;
            } else if (field.defaultValue === 'invoiceDate') {
                // Spezialfall: serviceDate = invoiceDate wenn leer
                if (field.btId === 'BT-72' && !enhancedData.serviceDate) {
                    enhancedData.serviceDate = enhancedData.invoiceDate;
                }
            }
        }
    });
    
    // Berechne automatisch berechnete Felder
    if (enhancedData.lineItems && enhancedData.lineItems.length > 0) {
        const totalNet = enhancedData.lineItems.reduce((sum, item) => 
            sum + parseFloat(item.netAmount || 0), 0);
        const taxRate = parseFloat(enhancedData.taxRate || 19) / 100;
        const totalTax = totalNet * taxRate;
        const totalGross = totalNet + totalTax;
        
        enhancedData.totalNetAmount = totalNet.toFixed(2);
        enhancedData.totalTaxAmount = totalTax.toFixed(2);
        enhancedData.grossAmount = totalGross.toFixed(2);
    }
    
    // Setze Fälligkeitsdatum basierend auf Rechnungsdatum + 30 Tage wenn leer
    if (!enhancedData.paymentDueDate && enhancedData.invoiceDate) {
        const dueDate = new Date(enhancedData.invoiceDate);
        dueDate.setDate(dueDate.getDate() + 30);
        enhancedData.paymentDueDate = dueDate.toISOString().slice(0, 10);
    }
    
    return enhancedData;
};

// Hilfsfunktion um Feldnamen aus BT-ID zu ermitteln
const getFieldNameFromBtId = (btId) => {
    const fieldMapping = {
        'BT-1': 'reference',
        'BT-2': 'invoiceDate',
        'BT-3': 'invoiceTypeCode',
        'BT-5': 'invoiceCurrencyCode',
        'BT-9': 'paymentDueDate',
        'BT-10': 'leitwegId',
        'BT-12': 'contractReference',
        'BT-13': 'orderReference',
        'BT-20': 'paymentTerms',
        'BT-25': 'precedingInvoiceReference',
        'BT-27': 'senderName',
        'BT-31': 'senderTaxId',
        'BT-34': 'senderElectronicAddress',
        'BT-35': 'senderStreet',
        'BT-37': 'senderCity',
        'BT-38': 'senderZip',
        'BT-40': 'senderCountry',
        'BT-41': 'senderContactName',
        'BT-42': 'senderContactPhone',
        'BT-43': 'senderContactEmail',
        'BT-44': 'recipientName',
        'BT-49': 'recipientElectronicAddress',
        'BT-50': 'recipientStreet',
        'BT-52': 'recipientCity',
        'BT-53': 'recipientZip',
        'BT-55': 'recipientCountry',
        'BT-72': 'serviceDate',
        'BT-81': 'paymentMeansCode',
        'BT-84': 'iban',
        'BT-86': 'bic',
        'BT-92': 'documentLevelAllowance',
        'BT-99': 'documentLevelCharge',
        'BT-129': 'billedQuantity',
        'BT-130': 'unitCode',
        'BT-146': 'price',
        'BT-152': 'taxRate',
        'BT-153': 'name'
    };
    return fieldMapping[btId];
};

// Validierungsfunktion für EN16931/XRechnung-spezifische Anforderungen
const validateEN16931Fields = (formData) => {
    const errors = [];
    const warnings = [];
    
    // Prüfe Pflichtfelder (außer Positionsfelder)
    const mandatoryFields = eRechnungMappingData.filter(field => field.mandatory && !['BT-126', 'BT-129', 'BT-146', 'BT-153', 'BT-131'].includes(field.btId));
    mandatoryFields.forEach(field => {
        const fieldName = getFieldNameFromBtId(field.btId);
        if (fieldName && !formData[fieldName]) {
            if (field.btId === 'BT-10' && field.xrechnungSpecific) {
                errors.push(`XRechnung-Pflichtfeld fehlt: ${field.description} (${field.btId})`);
            } else {
                errors.push(`Pflichtfeld fehlt: ${field.description} (${field.btId})`);
            }
        }
    });
    
    // Validiere Rechnungspositionen
    if (!formData.lineItems || formData.lineItems.length === 0) {
        errors.push('Mindestens eine Rechnungsposition ist erforderlich');
    } else {
        formData.lineItems.forEach((item, index) => {
            if (!item.name || item.name.trim() === '') {
                errors.push(`Position ${index + 1}: Artikelname ist erforderlich (BT-153)`);
            }
            if (!item.billedQuantity || parseFloat(item.billedQuantity) <= 0) {
                errors.push(`Position ${index + 1}: Menge muss größer als 0 sein (BT-129)`);
            }
            if (!item.price || parseFloat(item.price) < 0) {
                errors.push(`Position ${index + 1}: Preis muss angegeben werden (BT-146)`);
            }
        });
    }
    
    // XRechnung-spezifische Validierungen
    // Leitweg-ID ist für XRechnung erforderlich
    if (!formData.leitwegId || formData.leitwegId.trim() === '') {
        errors.push('XRechnung-Pflichtfeld fehlt: Leitweg-ID (BT-10) - bitte in den optionalen Feldern ausfüllen');
    } else {
        const leitwegIdPattern = /^[0-9]{2,30}-[a-zA-Z0-9]{1,30}$/;
        if (!leitwegIdPattern.test(formData.leitwegId)) {
            errors.push('Leitweg-ID muss Format "99999999-ABCDEF" haben (XR-2)');
        }
    }
    
    // IBAN-Validierung für Deutschland
    if (formData.iban && !formData.iban.startsWith('DE')) {
        warnings.push('Für deutsche XRechnung wird deutsche IBAN empfohlen');
    }
    
    // Geschäftsregeln-Validierung
    if (formData.lineItems && formData.lineItems.length > 0) {
        const calculatedTotal = formData.lineItems.reduce((sum, item) => 
            sum + parseFloat(item.netAmount || 0), 0);
        const formTotal = parseFloat(formData.totalNetAmount || 0);
        
        if (Math.abs(calculatedTotal - formTotal) > 0.01) {
            errors.push('BR-1: Rechnungssumme stimmt nicht mit Positionssumme überein');
        }
    }
    
    return { errors, warnings };
};



// XML-Generierung mit hierarchischer Struktur (basierend auf Live-Vorschau)
const generateSapXmlFromMapping = (mapping, formData, additionalData = {}) => {
  const replaceVariables = (template, data) => {
    if (!template || typeof template !== 'string') return template;
    return template.replace(/\{\{(\w+)\}\}/g, (match, key) => {
      const value = data[key];
      if (value === undefined) {
        console.warn(`Platzhalter ${key} nicht gefunden`);
        return match;
      }
      return escapeXml(String(value));
    });
  };

  // Generiere hierarchische XML (wie in der Live-Vorschau)
  const generateXmlRecursive = (items, level = 0) => {
    const indent = '  '.repeat(level);
    let xml = '';

    items.forEach(item => {
      if (item.type === 'container') {
        xml += `${indent}<${item.name}>\n`;
        if (item.children && item.children.length > 0) {
          xml += generateXmlRecursive(item.children, level + 1);
        }
        xml += `${indent}</${item.name}>\n`;
      } else if (item.type === 'field') {
        const value = replaceVariables(item.value || '', { ...formData, ...additionalData });
        let attributes = '';
        if (item.attributes) {
          attributes = ' ' + Object.entries(item.attributes)
            .map(([key, val]) => `${key}="${replaceVariables(val, { ...formData, ...additionalData })}"`)
            .join(' ');
        }
        xml += `${indent}<${item.name}${attributes}>${value}</${item.name}>\n`;
      }
    });

    return xml;
  };

  // Generiere die vollständige XML mit korrekter Hierarchie
  const xmlContent = generateXmlRecursive(mapping);
  const xmlHeader = '<?xml version="1.0" encoding="UTF-8"?>\n';
  return xmlHeader + xmlContent;
};

// XML-Vorschau Generierung für Live-Preview
const generateXmlPreview = (mapping, formData, additionalData = {}) => {
  const generatePreviewRecursive = (items, level = 0) => {
    const indent = '  '.repeat(level);
    let lines = [];

    items.forEach((item, index) => {
      if (item.type === 'container') {
        lines.push(`${indent}<${item.name}>`);
        if (item.children && item.children.length > 0) {
          lines.push(...generatePreviewRecursive(item.children, level + 1));
        }
        lines.push(`${indent}</${item.name}>`);
      } else if (item.type === 'field') {
        let displayValue = item.value || '[leer]';
        
        // Ersetze Template-Variablen mit aktuellen Daten
        if (displayValue && typeof displayValue === 'string') {
          displayValue = displayValue.replace(/\{\{(\w+)\}\}/g, (match, key) => {
            // Zuerst in additionalData suchen (kreditorId, buchungskreisId)
            if (additionalData && additionalData[key] !== undefined) {
              return additionalData[key] || '[leer]';
            }
            // Dann in formData suchen
            if (formData && formData[key] !== undefined) {
              return formData[key] || '[leer]';
            }
            // Falls nicht gefunden, original Template zeigen
            return match;
          });
        }
        
        lines.push(`${indent}<${item.name}>${displayValue}</${item.name}>`);
      }
    });

    return lines;
  };

  const lines = generatePreviewRecursive(mapping);
  return lines.join('\n');
};

// Hilfsfunktion zum Finden von Elementen in der Hierarchie
// eslint-disable-next-line no-unused-vars
const findElementById = (mapping, id) => {
  for (const item of mapping) {
    if (item.id === id) return item;
    if (item.children) {
      const found = findElementById(item.children, id);
      if (found) return found;
    }
  }
  return null;
};

// Hilfsfunktion zum Aktualisieren von Elementen in der Hierarchie
// eslint-disable-next-line no-unused-vars
const updateElementInMapping = (mapping, id, field, value) => {
  return mapping.map(item => {
    if (item.id === id) {
      return { ...item, [field]: value };
    }
    if (item.children) {
      return { ...item, children: updateElementInMapping(item.children, id, field, value) };
    }
    return item;
  });
};

// Hilfskomponente für Formularfelder mit BT-ID
const FormField = ({ name, label, value, onChange, placeholder, type = "text", btId, children, disabled = false, isUnmapped = false, mandatory = false, formats = [], newField = false, xrechnungSpecific = false }) => {
  const fieldMapping = eRechnungMappingData.find(field => field.btId === btId);
  const isMandatory = fieldMapping?.mandatory || mandatory;
  const fieldFormats = fieldMapping?.formats || formats;
  const isXRechnungSpecific = fieldMapping?.xrechnungSpecific || xrechnungSpecific;
  
  // Zeige Format-Labels nur wenn NICHT alle drei Formate unterstützt werden
  const shouldShowFormatLabels = fieldFormats.length > 0 && 
    !(fieldFormats.length === 3 && 
      fieldFormats.includes('EN16931') && 
      fieldFormats.includes('XRechnung') && 
      fieldFormats.includes('ZUGFeRD'));
  
  return (
    <div className="relative">
        <label htmlFor={name} className="flex items-center text-sm font-medium text-gray-600 mb-1">
          <span className="flex items-center">
          {label}
            {isMandatory && <span className="ml-1 text-red-500 font-bold">*</span>}
            {isXRechnungSpecific && <span className="ml-1.5 text-xs bg-blue-100 text-blue-700 px-1.5 py-0.5 rounded-full">XR</span>}
          </span>
          {btId && (
            <div className="ml-auto flex items-center space-x-1">
              <span className="text-[10px] font-sans text-gray-500">({btId})</span>
              {shouldShowFormatLabels && (
                <div className="flex space-x-0.5">
                  {fieldFormats.map(format => (
                    <span key={format} className={`text-[8px] px-1 py-0.5 rounded-full font-medium ${
                      format === 'XRechnung' ? 'bg-blue-50 text-blue-600' :
                      format === 'EN16931' ? 'bg-purple-50 text-purple-600' :
                      format === 'ZUGFeRD' ? 'bg-orange-50 text-orange-600' : 'bg-gray-50 text-gray-600'
                    }`}>
                      {format}
                    </span>
                  ))}
                </div>
              )}
            </div>
          )}
        </label>
        {children ? (
            <select id={name} name={name} value={value || ''} onChange={onChange} className={`w-full p-3 rounded-xl border transition-all duration-200 ${
                value && value.trim() !== '' 
                    ? 'bg-blue-50 text-blue-900 font-medium border-blue-200' 
                    : 'bg-white/50 text-gray-800 border-white/30'
            } ${isUnmapped ? 'border-red-500 ring-2 ring-red-200' : isMandatory ? 'focus:outline-none focus:ring-2 focus:ring-blue-500' : 'focus:outline-none focus:ring-2 focus:ring-gray-400'}`}>
                {children}
            </select>
        ) : (
            <input id={name} type={type} name={name} value={value || ''} onChange={onChange} placeholder={placeholder} disabled={disabled} className={`w-full p-3 rounded-xl border transition-all duration-200 placeholder:text-gray-400 ${
                value && value.trim() !== '' 
                    ? 'bg-blue-50 text-blue-900 font-medium border-blue-200' 
                    : 'bg-white/50 text-gray-800 border-white/30'
            } ${disabled ? 'bg-gray-100 text-gray-500' : ''} ${isUnmapped ? 'border-red-500 ring-2 ring-red-200' : isMandatory ? 'focus:outline-none focus:ring-2 focus:ring-blue-500' : 'focus:outline-none focus:ring-2 focus:ring-gray-400'}`}/>
        )}
        {isUnmapped && (
            <div className="absolute top-0 right-0 -mt-1 -mr-1" title={`Feld "${label}" konnte nicht aus der Datei gelesen werden.`}>
                <AlertCircle className="h-5 w-5 text-white bg-red-500 rounded-full p-0.5" />
            </div>
        )}
    </div>
);
};

// Formatierungsfunktionen
const formatDate = (dateString) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString('de-DE', { year: 'numeric', month: '2-digit', day: '2-digit' });
};

const formatCurrency = (amount) => {
    const number = parseFloat(amount);
    return isNaN(number) ? '0,00' : number.toLocaleString('de-DE', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
};

const getDocumentTypeName = (code) => {
    switch (code) {
        case '380': return 'Rechnung';
        case '389': return 'Selbst ausgestellte Rechnung';
        case '384': return 'Korrigierte Rechnung';
        case '261': return 'Gutschrift';
        default: return 'Dokument';
    }
};

// #endregion

// #region LAYOUT COMPONENTS
// ============================================================================

const LayoutClassic = ({ formData }) => (
    <div className="bg-white text-gray-800 p-10 font-sans shadow-2xl rounded-lg w-full">
      <header className="flex justify-between items-start pb-6 border-b-2 border-gray-100">
        <div>
            <h2 className="text-4xl font-extrabold uppercase text-gray-800 tracking-wider">{getDocumentTypeName(formData.invoiceTypeCode)}</h2>
        </div>
      </header>
      <section className="grid grid-cols-2 gap-12 mt-8">
        <div>
          <p className="text-sm font-semibold text-gray-600 mb-2">RECHNUNGSSTELLER</p>
          <p className="font-bold text-gray-800 break-words">{formData.senderName}</p>
          <p className="text-gray-600 break-words">{formData.senderStreet}, {formData.senderZip} {formData.senderCity}</p>
          <p className="text-gray-600 break-words">{formData.senderContactEmail}</p>
          <p className="text-gray-600 break-words">Steuernummer: {formData.senderTaxId}</p>
        </div>
        <div>
          <p className="text-sm font-semibold text-gray-600 mb-2">RECHNUNGSEMPFÄNGER</p>
          <p className="font-bold text-gray-800 break-words">{formData.recipientName}</p>
          <p className="text-gray-600 break-words">{formData.recipientStreet}, {formData.recipientZip} {formData.recipientCity}</p>
          <p className="text-gray-600 break-words">{formData.recipientElectronicAddress}</p>
          <p className="text-gray-600 break-words">Leitweg-ID: {formData.leitwegId}</p>
        </div>
      </section>
      <section className="mt-8 pt-8 border-t border-gray-100 text-sm">
          <div className="grid grid-cols-3 gap-4">
              <div><span className="font-semibold text-gray-600">Rechnungs-Nr.:</span> <span className="text-gray-800 break-all">{formData.reference}</span></div>
              <div><span className="font-semibold text-gray-600">Rechnungsdatum:</span> <span className="text-gray-800">{formatDate(formData.invoiceDate)}</span></div>
              <div><span className="font-semibold text-gray-600">Leistungsdatum:</span> <span className="text-gray-800">{formatDate(formData.serviceDate)}</span></div>
          </div>
      </section>
      <section className="mt-10">
        <table className="w-full text-sm">
          <thead className="bg-gray-50">
            <tr>
              <th className="text-left font-semibold text-gray-600 p-3 rounded-l-lg">Beschreibung</th>
              <th className="text-right font-semibold text-gray-600 p-3">Menge</th>
              <th className="text-right font-semibold text-gray-600 p-3">Einzelpreis (€)</th>
              <th className="text-right font-semibold text-gray-600 p-3 rounded-r-lg">Gesamt (€)</th>
            </tr>
          </thead>
          <tbody>
            {formData.lineItems.map((item) => (
              <tr key={item.id} className="border-b border-gray-100">
                <td className="p-3 font-medium text-gray-800 break-words">{item.name}</td>
                <td className="text-right p-3 text-gray-600">{item.billedQuantity}</td>
                <td className="text-right p-3 text-gray-600">{formatCurrency(item.price)}</td>
                <td className="text-right p-3 font-medium text-gray-800">{formatCurrency(item.netAmount)}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </section>
      <section className="grid grid-cols-2 gap-12 mt-8">
        <div className="w-full text-sm">
          <div className="flex justify-between py-2">
            <span className="font-semibold text-gray-600">Nettobetrag:</span>
            <span className="text-gray-800">{formatCurrency(formData.totalNetAmount)} {formData.invoiceCurrencyCode}</span>
          </div>
          <div className="flex justify-between py-2">
            <span className="font-semibold text-gray-600">MwSt. ({formData.taxRate}%):</span>
            <span className="text-gray-800">{formatCurrency(formData.totalTaxAmount)} {formData.invoiceCurrencyCode}</span>
          </div>
          <div className="flex justify-between py-3 mt-2 border-t-2 border-gray-200 bg-gray-50 rounded-lg px-4">
            <span className="font-bold text-lg text-gray-900">Gesamtbetrag:</span>
            <span className="font-bold text-lg text-gray-900">{formatCurrency(formData.grossAmount)} {formData.invoiceCurrencyCode}</span>
          </div>
        </div>
        <div>
            <p className="font-semibold text-gray-600 text-sm">Zahlungsinformationen</p>
            <p className="text-xs text-gray-500 mt-2 break-words">{formData.paymentTerms}</p>
            <div className="mt-2 text-xs break-words">
                <p><span className="font-bold text-gray-600">IBAN:</span> {formData.iban}</p>
                <p><span className="font-bold text-gray-600">BIC:</span> {formData.bic}</p>
            </div>
        </div>
      </section>
      <footer className="mt-12 pt-6 border-t-2 border-gray-100 text-center text-xs text-gray-500">
      </footer>
    </div>
);

const LayoutModern = ({ formData }) => (
    <div className="bg-white text-gray-800 p-10 font-sans shadow-2xl rounded-lg w-full">
        <header className="flex justify-between items-center pb-6">
            <h1 className="text-5xl font-thin uppercase text-gray-800 tracking-[0.3em]">{getDocumentTypeName(formData.invoiceTypeCode)}</h1>
        </header>
        <section className="grid grid-cols-2 gap-8 mt-10 pb-8 border-b border-gray-200">
            <div>
                <p className="text-xs font-bold text-gray-500 tracking-wider mb-2">RECHNUNG AN</p>
                <p className="font-medium text-gray-800 break-words">{formData.recipientName}</p>
                <p className="text-gray-600 text-sm break-words">{formData.recipientStreet}, {formData.recipientZip} {formData.recipientCity}</p>
                {formData.recipientElectronicAddress && (
                    <p className="text-gray-600 text-sm break-words">{formData.recipientElectronicAddress}</p>
                )}
                {formData.leitwegId && (
                    <p className="text-gray-600 text-sm break-words">Leitweg-ID: {formData.leitwegId}</p>
                )}
            </div>
            <div className="text-right">
                <p className="text-xs font-bold text-gray-500 tracking-wider mb-2">VON</p>
                <p className="font-medium text-gray-800 break-words">{formData.senderName}</p>
                <p className="text-gray-600 text-sm break-words">{formData.senderStreet}, {formData.senderZip} {formData.senderCity}</p>
                {formData.senderContactEmail && (
                    <p className="text-gray-600 text-sm break-words">{formData.senderContactEmail}</p>
                )}
                {formData.senderTaxId && (
                    <p className="text-gray-600 text-sm break-words">Steuernummer: {formData.senderTaxId}</p>
                )}
            </div>
        </section>
         <section className="grid grid-cols-3 gap-8 mt-4 pb-8">
            <div>
                <p className="text-xs font-bold text-gray-500 tracking-wider mb-2">RECHNUNGS-NR.</p>
                <p className="font-mono text-gray-800 break-all">{formData.reference}</p>
            </div>
            <div>
                <p className="text-xs font-bold text-gray-500 tracking-wider mb-2">DATUM</p>
                <p className="font-medium text-gray-800">{formatDate(formData.invoiceDate)}</p>
            </div>
             <div>
                <p className="text-xs font-bold text-gray-500 tracking-wider mb-2">LEISTUNGSDATUM</p>
                <p className="font-medium text-gray-800">{formatDate(formData.serviceDate)}</p>
            </div>
        </section>
        <section className="mt-8">
            <table className="w-full text-sm">
                <thead>
                    <tr>
                        <th className="text-left font-bold text-gray-500 tracking-wider p-3">LEISTUNG</th>
                        <th className="text-right font-bold text-gray-500 tracking-wider p-3">MENGE</th>
                        <th className="text-right font-bold text-gray-500 tracking-wider p-3">PREIS</th>
                        <th className="text-right font-bold text-gray-500 tracking-wider p-3">SUMME</th>
                    </tr>
                </thead>
                <tbody>
                    {formData.lineItems.map((item) => (
                        <tr key={item.id}>
                            <td className="p-3 border-b border-gray-100 font-medium text-gray-800 break-words">{item.name}</td>
                            <td className="text-right p-3 border-b border-gray-100 text-gray-600">{item.billedQuantity}</td>
                            <td className="text-right p-3 border-b border-gray-100 text-gray-600">{formatCurrency(item.price)} {formData.invoiceCurrencyCode}</td>
                            <td className="text-right p-3 border-b border-gray-100 font-medium text-gray-800">{formatCurrency(item.netAmount)} {formData.invoiceCurrencyCode}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </section>
        <section className="flex justify-end mt-8">
            <div className="w-full max-w-xs text-sm">
                <div className="flex justify-between py-2 text-gray-600"><span>Zwischensumme</span><span>{formatCurrency(formData.totalNetAmount)} {formData.invoiceCurrencyCode}</span></div>
                <div className="flex justify-between py-2 text-gray-600"><span>MwSt. ({formData.taxRate}%)</span><span>{formatCurrency(formData.totalTaxAmount)} {formData.invoiceCurrencyCode}</span></div>
                <div className="flex justify-between py-3 mt-2 border-t-2 border-gray-800">
                    <span className="font-bold text-xl text-gray-900">Gesamt</span>
                    <span className="font-bold text-xl text-gray-900">{formatCurrency(formData.grossAmount)} {formData.invoiceCurrencyCode}</span>
                </div>
            </div>
        </section>
        <footer className="mt-12 pt-6 border-t border-gray-200">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <p className="text-xs font-bold text-gray-500 tracking-wider mb-2">ZAHLUNGSINFORMATIONEN</p>
                    {formData.paymentTerms && (
                        <p className="text-xs text-gray-600 mb-2 break-words">{formData.paymentTerms}</p>
                    )}
                    <div className="text-xs text-gray-600 space-y-1">
                        {formData.iban && (
                            <p><span className="font-medium text-gray-700">IBAN:</span> {formData.iban}</p>
                        )}
                        {formData.bic && (
                            <p><span className="font-medium text-gray-700">BIC:</span> {formData.bic}</p>
                        )}
                    </div>
                </div>
                <div className="text-right">
                    <p className="text-xs font-bold text-gray-500 tracking-wider mb-2">KONTAKT</p>
                    <div className="text-xs text-gray-600 space-y-1">
                        {formData.senderContactName && (
                            <p>{formData.senderContactName}</p>
                        )}
                        {formData.senderContactPhone && (
                            <p>{formData.senderContactPhone}</p>
                        )}
                        {formData.senderElectronicAddress && (
                            <p>{formData.senderElectronicAddress}</p>
                        )}
                    </div>
                </div>
            </div>
        </footer>
    </div>
);

const LayoutMinimalist = ({ formData }) => (
    <div className="bg-white text-black p-10 font-mono text-xs w-full shadow-2xl rounded-lg">
        <header className="grid grid-cols-2 gap-10">
            <div className="break-words">
                <p>{formData.senderName}</p>
                <p>{formData.senderStreet}</p>
                <p>{formData.senderZip} {formData.senderCity}</p>
            </div>
            <div className="text-right break-words">
                <p>{getDocumentTypeName(formData.invoiceTypeCode)}</p>
            </div>
        </header>
        <section className="mt-10 pt-10 border-t border-black">
             <div className="grid grid-cols-2 gap-10">
                <div className="break-words">
                    <p className="mb-2">An:</p>
                    <p>{formData.recipientName}</p>
                    <p>{formData.recipientStreet}</p>
                    <p>{formData.recipientZip} {formData.recipientCity}</p>
                </div>
                <div className="text-right break-words">
                    <p>Nr: {formData.reference}</p>
                    <p>Datum: {formatDate(formData.invoiceDate)}</p>
                </div>
            </div>
        </section>
        <section className="mt-10">
            <div className="grid grid-cols-[1fr,auto,auto,auto] gap-4 py-2 border-b border-black font-bold">
                <p>Beschreibung</p><p className="text-right">Menge</p><p className="text-right">Einzel</p><p className="text-right">Gesamt</p>
            </div>
            {formData.lineItems.map(item => (
                <div key={item.id} className="grid grid-cols-[1fr,auto,auto,auto] gap-4 py-2 border-b border-gray-200">
                    <p className="break-words">{item.name}</p>
                    <p className="text-right">{item.billedQuantity}</p>
                    <p className="text-right">{formatCurrency(item.price)}</p>
                    <p className="text-right">{formatCurrency(item.netAmount)}</p>
                </div>
            ))}
        </section>
        <section className="mt-10 flex justify-end">
            <div className="w-1/2 space-y-2">
                <div className="flex justify-between"><p>Netto</p><p>{formatCurrency(formData.totalNetAmount)} €</p></div>
                <div className="flex justify-between"><p>MwSt. {formData.taxRate}%</p><p>{formatCurrency(formData.totalTaxAmount)} €</p></div>
                <div className="flex justify-between pt-2 border-t border-black font-bold"><p>Brutto</p><p>{formatCurrency(formData.grossAmount)} €</p></div>
            </div>
        </section>
        <footer className="mt-10 pt-10 border-t border-black text-center">
            <p>IBAN: {formData.iban}</p>
        </footer>
    </div>
);

const LayoutCreative = ({ formData }) => (
    <div className="bg-gray-900 text-white p-10 font-sans shadow-2xl rounded-lg w-full">
        <header className="flex justify-between items-start pb-6 border-b border-gray-700">
            <div>
                <h1 className="text-5xl font-bold text-white tracking-tight">{getDocumentTypeName(formData.invoiceTypeCode)}</h1>
                <p className="text-gray-400 mt-2">Rechnungs-Nr. {formData.reference}</p>
            </div>
        </header>
        <section className="grid grid-cols-2 gap-10 mt-8 text-sm">
            <div>
                <p className="text-gray-400 mb-2">RECHNUNG AN</p>
                <p className="font-medium text-white break-words">{formData.recipientName}</p>
                <p className="text-gray-300 break-words">{formData.recipientStreet}, {formData.recipientZip} {formData.recipientCity}</p>
            </div>
            <div className="text-right">
                <p className="text-gray-400">Rechnungsdatum: {formatDate(formData.invoiceDate)}</p>
                <p className="text-gray-400">Leistungsdatum: {formatDate(formData.serviceDate)}</p>
            </div>
        </section>
        <section className="mt-10">
            <table className="w-full text-sm">
                <thead>
                    <tr className="border-b border-gray-700">
                        <th className="text-left p-3 font-semibold tracking-wider">LEISTUNG</th>
                        <th className="text-right p-3 font-semibold tracking-wider">MENGE</th>
                        <th className="text-right p-3 font-semibold tracking-wider">PREIS</th>
                        <th className="text-right p-3 font-semibold tracking-wider">SUMME</th>
                    </tr>
                </thead>
                <tbody>
                    {formData.lineItems.map((item, index) => (
                        <tr key={item.id} className={`${index === formData.lineItems.length - 1 ? '' : 'border-b border-gray-800'}`}>
                            <td className="p-3 break-words">{item.name}</td>
                            <td className="text-right p-3">{item.billedQuantity}</td>
                            <td className="text-right p-3">{formatCurrency(item.price)} €</td>
                            <td className="text-right p-3">{formatCurrency(item.netAmount)} €</td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </section>
        <section className="mt-8 pt-8 border-t border-gray-700 flex justify-between items-start">
            <div className="text-xs text-gray-400">
                <p className="font-bold text-gray-300 mb-2">Zahlungsinformationen</p>
                <p>IBAN: {formData.iban}</p>
                <p>BIC: {formData.bic}</p>
                <p className="mt-2">{formData.paymentTerms}</p>
            </div>
            <div className="w-1/3 text-sm">
                <div className="flex justify-between text-gray-400"><span>Netto</span><span>{formatCurrency(formData.totalNetAmount)} €</span></div>
                <div className="flex justify-between text-gray-400 mt-2"><span>MwSt. ({formData.taxRate}%)</span><span>{formatCurrency(formData.totalTaxAmount)} €</span></div>
                <div className="flex justify-between text-2xl font-bold text-white mt-4 pt-4 border-t border-gray-700"><span>Gesamt</span><span>{formatCurrency(formData.grossAmount)} €</span></div>
            </div>
        </section>
    </div>
);

const PdfPreview = ({ pdfUrl }) => {
    return (
        <div className="w-full h-full bg-white rounded-xl shadow-lg overflow-hidden">
            <div className="bg-gray-100 px-4 py-2 border-b">
                <p className="text-sm text-gray-600 font-medium">Original ZUGFeRD-PDF</p>
            </div>
            <iframe 
                src={`${pdfUrl}#toolbar=0&navpanes=0&scrollbar=0&view=FitH`}
                className="w-full h-full min-h-[600px]" 
                title="PDF Vorschau"
                style={{ 
                    border: 'none',
                    pointerEvents: 'none', // Verhindert Interaktion mit dem PDF
                    overflow: 'hidden'
                }}
                scrolling="no"
            />
        </div>
    );
};

const InvoicePreview = ({ formData, layout, showPdfPreview, pdfUrl, dataSource }) => {
    if (showPdfPreview && pdfUrl) {
        return <PdfPreview pdfUrl={pdfUrl} />;
    }
    
    // Filtere Daten basierend auf Datenquelle
    const getFilteredData = () => {
        if (dataSource === 'ki') {
            // Bei KI-Werten: Nur Pflichtfelder und befüllte Felder anzeigen
            const mandatoryFieldNames = eRechnungMappingData
                .filter(field => field.mandatory)
                .map(field => getFieldNameFromBtId(field.btId))
                .filter(Boolean);
            
            const filteredData = { ...formData };
            
            // Entferne optionale Felder, die leer sind
            Object.keys(filteredData).forEach(key => {
                if (!mandatoryFieldNames.includes(key) && 
                    key !== 'lineItems' && 
                    (!filteredData[key] || filteredData[key].trim() === '')) {
                    delete filteredData[key];
                }
            });
            
            return filteredData;
        }
        
        // Bei Upload: Alle verfügbaren Daten anzeigen
        return formData;
    };
    
    const displayData = getFilteredData();
    
    switch(layout) {
        case 'modern': return <LayoutModern formData={displayData} />;
        case 'minimalist': return <LayoutMinimalist formData={displayData} />;
        case 'creative': return <LayoutCreative formData={displayData} />;
        case 'classic':
        default: return <LayoutClassic formData={displayData} />;
    }
};

// #endregion

// #region PAGE COMPONENTS
// ============================================================================

const HomePage = ({
    formData,
    formRef,
    previewContainerRef,
    previewContentRef,
    previewTransform,
    loadingPrefill,
    handlePrefill,
    handleReset,
    handleUploadClick,
    fileInputRef,
    handleFileUpload,
    handleInputChange,
    handleLineItemChange,
    addLineItem,
    removeLineItem,
    loading,
    generateXRechnungUBL,
    loadingSummary,
    handleOpenSapModal,
    sapXml,
    handleCopy,
    handleDownload,
    xrechnungXML,
    en16931XML,
    selectedLayout,
    unmappedFields,
    activeXmlTab,
    setActiveXmlTab,
    setSapXml,
    setXrechnungXML,
    setEn16931XML,
    dataSource,
    showXRechnungButton,
    xrechnungTabEnabled,
    showPdfPreview,
    uploadedPdfData,
    showOptionalFields,
    setShowOptionalFields
}) => (
    <>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Left side: Form */}
        <div className="space-y-6" ref={formRef}>
          <div className="flex justify-between items-center border-b border-white/30 pb-2 mb-4">
              <h2 className="text-2xl font-semibold text-gray-800">Rechnungsdaten</h2>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <button onClick={handleUploadClick} className="p-3 flex items-center justify-center space-x-2 rounded-xl bg-white/50 hover:bg-white/80 text-gray-700 font-semibold shadow-sm transition-colors">
                <Upload size={20} />
                <span>XML/PDF laden</span>
              </button>
              <button onClick={handleReset} className="p-3 flex items-center justify-center space-x-2 rounded-xl bg-white/50 hover:bg-white/80 text-gray-700 font-semibold shadow-sm transition-colors">
                  <RotateCcw size={20} />
                  <span>Zurücksetzen</span>
              </button>
              <button onClick={handlePrefill} disabled={loadingPrefill} className="p-3 flex items-center justify-center space-x-2 rounded-xl bg-white/50 hover:bg-white/80 text-gray-700 font-semibold shadow-sm transition-colors disabled:bg-gray-200/50 disabled:cursor-not-allowed">
                  {loadingPrefill ? <Loader2 className="animate-spin" size={20} /> : <Sparkles size={20} />}
                  <span>KI-Werte</span>
              </button>
              <input type="file" ref={fileInputRef} onChange={handleFileUpload} accept=".xml,.pdf" className="hidden"/>
          </div>
          
          {/* Checkbox für optionale Felder */}
          <div className="mb-6">
              <label className="flex items-center space-x-2 text-sm text-gray-700 cursor-pointer">
                  <input 
                      type="checkbox" 
                      checked={showOptionalFields} 
                      onChange={(e) => setShowOptionalFields(e.target.checked)}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span>Optionale Felder einblenden</span>
              </label>
          </div>
          
          {/* Invoice Issuer - Erweiterte Pflichtfelder */}
          <div className="space-y-4 p-5 bg-white/30 backdrop-blur-xl border border-white/30 rounded-2xl shadow-lg">
              <div className="flex items-center justify-between">
              <h3 className="font-semibold text-lg text-gray-800">Rechnungssteller</h3>
                <span className="text-xs text-gray-500">Pflichtfelder für e-Rechnung</span>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {/* Pflichtfelder */}
                  <FormField name="senderName" label="Name" value={formData.senderName} onChange={handleInputChange} placeholder="Firma GmbH" btId="BT-27" isUnmapped={unmappedFields.includes('senderName')}/>
                  <FormField name="senderTaxId" label="Steuernummer / USt-IdNr." value={formData.senderTaxId} onChange={handleInputChange} placeholder="DE123456789" btId="BT-31" isUnmapped={unmappedFields.includes('senderTaxId')}/>
                  <FormField name="senderStreet" label="Straße & Hausnummer" value={formData.senderStreet} onChange={handleInputChange} placeholder="Musterstraße 1" btId="BT-35" isUnmapped={unmappedFields.includes('senderStreet')}/>
                  <FormField name="senderZip" label="PLZ" value={formData.senderZip} onChange={handleInputChange} placeholder="12345" btId="BT-38" isUnmapped={unmappedFields.includes('senderZip')}/>
                  <FormField name="senderCity" label="Ort" value={formData.senderCity} onChange={handleInputChange} placeholder="Musterstadt" btId="BT-37" isUnmapped={unmappedFields.includes('senderCity')}/>
                  <FormField name="senderCountry" label="Ländercode" value={formData.senderCountry} onChange={handleInputChange} placeholder="DE" btId="BT-40" isUnmapped={unmappedFields.includes('senderCountry')}/>
                  
                  {/* Optionale Felder - nur wenn Checkbox aktiviert */}
                  {showOptionalFields && (
                    <>
                      <FormField name="senderElectronicAddress" label="Elektronische Adresse" value={formData.senderElectronicAddress} onChange={handleInputChange} placeholder="rechnung@firma.de" btId="BT-34" isUnmapped={unmappedFields.includes('senderElectronicAddress')}/>
                      <FormField name="senderContactName" label="Ansprechpartner" value={formData.senderContactName} onChange={handleInputChange} placeholder="Max Mustermann" btId="BT-41" isUnmapped={unmappedFields.includes('senderContactName')}/>
                      <FormField name="senderContactPhone" label="Telefon" value={formData.senderContactPhone} onChange={handleInputChange} placeholder="+49 30 123456" btId="BT-42" isUnmapped={unmappedFields.includes('senderContactPhone')}/>
                      <div className="md:col-span-2">
                        <FormField name="senderContactEmail" label="E-Mail" value={formData.senderContactEmail} onChange={handleInputChange} placeholder="max@firma.de" btId="BT-43" isUnmapped={unmappedFields.includes('senderContactEmail')}/>
                      </div>
                    </>
                  )}
              </div>
          </div>

          {/* Invoice Recipient - Erweiterte Pflichtfelder */}
          <div className="space-y-4 p-5 bg-white/30 backdrop-blur-xl border border-white/30 rounded-2xl shadow-lg">
              <div className="flex items-center justify-between">
              <h3 className="font-semibold text-lg text-gray-800">Rechnungsempfänger</h3>
                <span className="text-xs text-gray-500">Pflichtfelder für e-Rechnung</span>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {/* Pflichtfelder */}
                  <FormField name="recipientName" label="Name des Empfängers" value={formData.recipientName} onChange={handleInputChange} placeholder="Kunde AG" btId="BT-44" isUnmapped={unmappedFields.includes('recipientName')}/>
                  <FormField name="recipientCountry" label="Ländercode" value={formData.recipientCountry} onChange={handleInputChange} placeholder="DE" btId="BT-55" isUnmapped={unmappedFields.includes('recipientCountry')}/>
                  <FormField name="recipientStreet" label="Straße & Hausnummer" value={formData.recipientStreet} onChange={handleInputChange} placeholder="Kundenweg 2" btId="BT-50" isUnmapped={unmappedFields.includes('recipientStreet')}/>
                  <FormField name="recipientZip" label="PLZ" value={formData.recipientZip} onChange={handleInputChange} placeholder="54321" btId="BT-53" isUnmapped={unmappedFields.includes('recipientZip')}/>
                  <FormField name="recipientCity" label="Ort" value={formData.recipientCity} onChange={handleInputChange} placeholder="Kundenstadt" btId="BT-52" isUnmapped={unmappedFields.includes('recipientCity')}/>
                  
                  {/* Optionale Felder - nur wenn Checkbox aktiviert */}
                  {showOptionalFields && (
                    <>
                      <FormField name="recipientElectronicAddress" label="Elektronische Adresse" value={formData.recipientElectronicAddress} onChange={handleInputChange} placeholder="rechnung@kunde.de" btId="BT-49" isUnmapped={unmappedFields.includes('recipientElectronicAddress')}/>
                      <div className="md:col-span-2">
                          <FormField name="leitwegId" label="Leitweg-ID" value={formData.leitwegId} onChange={handleInputChange} placeholder="99999999-ABCDEF" btId="BT-10" isUnmapped={unmappedFields.includes('leitwegId')}/>
                      </div>
                    </>
                  )}
              </div>
          </div>

          {/* Invoice Details - Erweiterte Pflichtfelder */}
          <div className="space-y-4 p-5 bg-white/30 backdrop-blur-xl border border-white/30 rounded-2xl shadow-lg">
              <div className="flex items-center justify-between">
              <h3 className="font-semibold text-lg text-gray-800">Rechnungsdetails</h3>
                <span className="text-xs text-gray-500">Pflichtfelder für e-Rechnung</span>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <FormField name="reference" label="Rechnungsnummer" value={formData.reference} onChange={handleInputChange} placeholder="RE-2025-001" btId="BT-1" isUnmapped={unmappedFields.includes('reference')}/>
                  <FormField name="invoiceDate" label="Rechnungsdatum" value={formData.invoiceDate} onChange={handleInputChange} type="date" btId="BT-2" isUnmapped={unmappedFields.includes('invoiceDate')}/>
                  <FormField name="invoiceTypeCode" label="Rechnungstyp" value={formData.invoiceTypeCode} onChange={handleInputChange} btId="BT-3" isUnmapped={unmappedFields.includes('invoiceTypeCode')}>
                      <option value="380">Rechnung (380)</option>
                      <option value="389">Selbst ausgestellte Rechnung (389)</option>
                      <option value="384">Korrigierte Rechnung (384)</option>
                      <option value="261">Gutschrift (261)</option>
                  </FormField>
                  <FormField name="invoiceCurrencyCode" label="Währung" value={formData.invoiceCurrencyCode} onChange={handleInputChange} placeholder="EUR" btId="BT-5" isUnmapped={unmappedFields.includes('invoiceCurrencyCode')}/>
                  <FormField name="serviceDate" label="Leistungs-/Lieferdatum" value={formData.serviceDate} onChange={handleInputChange} type="date" btId="BT-72" isUnmapped={unmappedFields.includes('serviceDate')}/>
                  <FormField name="paymentDueDate" label="Fälligkeitsdatum" value={formData.paymentDueDate} onChange={handleInputChange} type="date" btId="BT-9" isUnmapped={unmappedFields.includes('paymentDueDate')}/>
                  <FormField name="orderReference" label="Bestellreferenz" value={formData.orderReference} onChange={handleInputChange} placeholder="PO-2025-001" btId="BT-13" isUnmapped={unmappedFields.includes('orderReference')}/>
                  <FormField name="contractReference" label="Vertragsreferenz" value={formData.contractReference} onChange={handleInputChange} placeholder="CONTRACT-2025-001" btId="BT-12" isUnmapped={unmappedFields.includes('contractReference')}/>
                  
                  {/* Optionale Felder - nur wenn Checkbox aktiviert */}
                  {showOptionalFields && (
                    <>
                      <div className="md:col-span-2">
                        <FormField name="precedingInvoiceReference" label="Vorherige Rechnungsreferenz" value={formData.precedingInvoiceReference} onChange={handleInputChange} placeholder="RE-2024-999" btId="BT-25" isUnmapped={unmappedFields.includes('precedingInvoiceReference')}/>
                      </div>
                    </>
                  )}
              </div>
          </div>

          {/* Line Items */}
          <div className="space-y-4 p-5 bg-white/30 backdrop-blur-xl border border-white/30 rounded-2xl shadow-lg">
              <div className="flex justify-between items-center">
                  <h3 className="font-semibold text-lg text-gray-800">Rechnungspositionen</h3>
                  <button onClick={addLineItem} className="p-2 rounded-full bg-white/50 text-gray-700 hover:bg-white/80 transition-colors" title="Position hinzufügen">
                      <PlusCircle size={20} />
                  </button>
              </div>
              {formData.lineItems.map((item, index) => (
                  <div key={item.id} className="p-3 border border-white/30 rounded-xl space-y-3 relative">
                      <div className="flex justify-between items-center">
                          <p className="font-semibold text-gray-700">Position {index + 1} <span className="text-[10px] font-sans text-gray-500">(BT-126)</span></p>
                          {formData.lineItems.length > 1 && (
                              <button onClick={() => removeLineItem(item.id)} className="text-red-600 hover:opacity-80" title="Position entfernen">
                                  <Trash2 size={18} />
                              </button>
                          )}
                      </div>
                      <FormField name="name" label="Beschreibung" value={item.name} onChange={(e) => handleLineItemChange(item.id, 'name', e.target.value)} placeholder="Leistungsbeschreibung" btId="BT-153"/>
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                          <FormField name="billedQuantity" label="Menge" value={item.billedQuantity} onChange={(e) => handleLineItemChange(item.id, 'billedQuantity', e.target.value)} type="number" btId="BT-129"/>
                          <FormField name="unitCode" label="Einheit" value={item.unitCode} onChange={(e) => handleLineItemChange(item.id, 'unitCode', e.target.value)} placeholder="XPP" btId="BT-130"/>
                          <FormField name="price" label="Einzelpreis (Netto)" value={item.price} onChange={(e) => handleLineItemChange(item.id, 'price', e.target.value)} type="number" btId="BT-146"/>
                          <FormField name="netAmount" label="Gesamt (Netto)" value={item.netAmount} onChange={() => {}} type="number" btId="BT-131" disabled={true}/>
                      </div>
                  </div>
              ))}
          </div>
          
          {/* Totals Block */}
          <div className="space-y-4 p-5 bg-white/30 backdrop-blur-xl border border-white/30 rounded-2xl shadow-lg">
            <h3 className="font-semibold text-lg text-gray-800">Gesamtbeträge</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                    <label className="block text-sm font-medium text-gray-600">Gesamt Netto <span className="ml-1.5 text-[10px] font-sans text-gray-500">(BT-109)</span></label>
                    <p className="mt-1 w-full p-3 rounded-xl bg-white/50 text-gray-700 border border-white/30">{formData.totalNetAmount}</p>
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-600">Steuerbetrag <span className="ml-1.5 text-[10px] font-sans text-gray-500">(BT-110)</span></label>
                    <p className="mt-1 w-full p-3 rounded-xl bg-white/50 text-gray-700 border border-white/30">{formData.totalTaxAmount}</p>
                </div>
                <div>
                    <label className="block text-sm font-medium text-gray-600">Gesamt Brutto <span className="ml-1.5 text-[10px] font-sans text-gray-500">(BT-112)</span></label>
                    <p className="mt-1 w-full p-3 rounded-xl bg-white/50 text-gray-700 border border-white/30">{formData.grossAmount}</p>
                </div>
            </div>
          </div>

          {/* Zahlungs- und Steuerdetails */}
          <div className="space-y-4 p-5 bg-white/30 backdrop-blur-xl border border-white/30 rounded-2xl shadow-lg">
              <div className="flex items-center justify-between">
                <h3 className="font-semibold text-lg text-gray-800">Zahlungs- und Steuerdetails</h3>
                <span className="text-xs text-gray-500">Wichtige Zahlungsinformationen</span>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <FormField name="paymentTerms" label="Zahlungsbedingungen" value={formData.paymentTerms} onChange={handleInputChange} placeholder="Zahlbar innerhalb von 30 Tagen" btId="BT-20" isUnmapped={unmappedFields.includes('paymentTerms')}/>
                  <FormField name="paymentMeansCode" label="Zahlungsmittel-Code" value={formData.paymentMeansCode} onChange={handleInputChange} placeholder="58" btId="BT-81" isUnmapped={unmappedFields.includes('paymentMeansCode')}/>
                  <FormField name="iban" label="IBAN" value={formData.iban} onChange={handleInputChange} placeholder="DE..." btId="BT-84" isUnmapped={unmappedFields.includes('iban')}/>
                  <FormField name="bic" label="BIC" value={formData.bic} onChange={handleInputChange} placeholder="DEUTDEFFXXX" btId="BT-86" isUnmapped={unmappedFields.includes('bic')}/>
                  <FormField name="taxRate" label="MwSt.-Satz (%)" value={formData.taxRate} onChange={handleInputChange} type="number" placeholder="19" btId="BT-152" isUnmapped={unmappedFields.includes('taxRate')}/>
                  
                  {/* Optionale Felder - nur wenn Checkbox aktiviert */}
                  {showOptionalFields && (
                    <>
                      <FormField name="documentLevelAllowance" label="Rabatt auf Dokumentenebene" value={formData.documentLevelAllowance} onChange={handleInputChange} type="number" placeholder="50.00" btId="BT-92" isUnmapped={unmappedFields.includes('documentLevelAllowance')}/>
                      <FormField name="documentLevelCharge" label="Zuschlag auf Dokumentenebene" value={formData.documentLevelCharge} onChange={handleInputChange} type="number" placeholder="25.00" btId="BT-99" isUnmapped={unmappedFields.includes('documentLevelCharge')}/>
                    </>
                  )}
              </div>
          </div>


          {/* Action buttons */}
          <div className="flex flex-col gap-4 mt-6">
            {showXRechnungButton && (
              <button onClick={generateXRechnungUBL} disabled={loading} className="p-3 flex items-center justify-center space-x-2 rounded-xl bg-blue-600 text-white font-semibold hover:bg-blue-700 transition-all duration-200 disabled:bg-blue-400 disabled:cursor-not-allowed shadow-lg hover:shadow-xl">
                {loading ? <Loader2 className="animate-spin" size={20} /> : <FileText size={20} />}
                <span>e-Rechnung erstellen</span>
              </button>
            )}
            <button onClick={handleOpenSapModal} disabled={loadingSummary} className="p-3 flex items-center justify-center space-x-2 rounded-xl bg-white/50 hover:bg-white/80 text-gray-700 font-semibold shadow-sm transition-colors">
              {loadingSummary ? <Loader2 className="animate-spin" size={20} /> : <Send size={20} />}
              <span>{showXRechnungButton ? '2. ' : ''}SAP-XML erzeugen</span>
            </button>
          </div>
          
        </div>

        {/* Right side: HTML Preview */}
        <div className="h-full -mx-2">
            <div className="sticky top-20 h-[calc(100vh-100px)] overflow-hidden px-1" ref={previewContainerRef}>
                <div 
                  ref={previewContentRef} 
                  style={{ 
                    transform: `translateY(${previewTransform}px) scale(1.05)`, 
                    transformOrigin: 'top left',
                    transition: 'transform 0.2s ease-out' 
                  }}
                >
                    <div className="flex justify-between items-center border-b border-white/30 pb-2 mb-4 px-1">
                        <h2 className="text-2xl font-semibold text-gray-800">
                            {showPdfPreview ? 'PDF-Vorschau' : 'Rechnungsvorschau'}
                        </h2>
                        {showPdfPreview && (
                            <span className="text-sm bg-blue-100 text-blue-800 px-2 py-1 rounded-full font-medium">
                                ZUGFeRD-PDF
                            </span>
                        )}
                    </div>
                    <div className="px-1">
                        <InvoicePreview 
                            formData={formData} 
                            layout={selectedLayout} 
                            showPdfPreview={showPdfPreview}
                            pdfUrl={uploadedPdfData}
                            dataSource={dataSource}
                        />
                    </div>
                    <div className="h-16 md:h-24" />
                </div>
            </div>
        </div>
      </div>
      
      {/* Vereinheitlichte Vorschau */}
      <div className="mt-8">
        <h2 className="text-2xl font-semibold text-gray-800 border-b border-white/30 pb-2 mb-4">Vorschau</h2>
        
        {/* Tab-Navigation */}
        <div className="flex space-x-2 mb-4">
          <button 
            onClick={() => xrechnungTabEnabled && setActiveXmlTab('xrechnung')} 
            className={`px-4 py-2 rounded-lg transition-colors ${
              !xrechnungTabEnabled 
                ? 'bg-gray-200/50 text-gray-400 cursor-not-allowed' 
                : activeXmlTab === 'xrechnung' 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-white/50 text-gray-700 hover:bg-white/80'
            }`}
            disabled={!xrechnungTabEnabled}
          >
            XRechnung XML
          </button>
          
          {/* Tote Buttons ohne Funktion */}
          <button 
            className="px-4 py-2 rounded-lg bg-gray-200/50 text-gray-400 cursor-not-allowed"
            disabled={true}
          >
            Zugferd PDF
          </button>
          <button 
            onClick={() => setActiveXmlTab('en16931')} 
            className={`px-4 py-2 rounded-lg transition-colors ${activeXmlTab === 'en16931' ? 'bg-blue-600 text-white' : 'bg-white/50 text-gray-700 hover:bg-white/80'}`}
            disabled={!en16931XML}
          >
            EN16931
          </button>
          
          <button 
            onClick={() => setActiveXmlTab('sap')} 
            className={`px-4 py-2 rounded-lg transition-colors ${activeXmlTab === 'sap' ? 'bg-blue-600 text-white' : 'bg-white/50 text-gray-700 hover:bg-white/80'}`}
            disabled={!sapXml}
          >
            SAP XML
          </button>
        </div>

        {/* Vorschau-Inhalt */}
        <div className="relative">
          <textarea 
            className="w-full h-80 p-4 font-mono text-sm bg-white/50 text-gray-800 rounded-xl border border-white/30 resize-none" 
            value={activeXmlTab === 'xrechnung' ? xrechnungXML : activeXmlTab === 'en16931' ? en16931XML : sapXml} 
            readOnly 
            placeholder={
              activeXmlTab === 'xrechnung' ? "Generierte XRechnung-XML wird hier angezeigt..." : 
              activeXmlTab === 'en16931' ? "Generierte EN16931-XML wird hier angezeigt..." :
              "Generierte SAP-XML wird hier angezeigt..."
            }
          />
          {(activeXmlTab === 'xrechnung' ? xrechnungXML : activeXmlTab === 'en16931' ? en16931XML : sapXml) && (
            <div className="absolute top-2 right-2 flex space-x-2">
              <button 
                onClick={() => handleCopy(
                  activeXmlTab === 'xrechnung' ? xrechnungXML : 
                  activeXmlTab === 'en16931' ? en16931XML : 
                  sapXml
                )} 
                className="p-2 rounded-full bg-black/20 text-gray-700 hover:bg-black/30" 
                title="Kopieren"
              >
                <Copy size={16} />
              </button>
              <button 
                onClick={() => handleDownload(
                  activeXmlTab === 'xrechnung' ? xrechnungXML : 
                  activeXmlTab === 'en16931' ? en16931XML : 
                  sapXml, 
                  activeXmlTab === 'xrechnung' ? 'xrechnung.xml' : 
                  activeXmlTab === 'en16931' ? 'en16931.xml' :
                  'sap.xml', 
                  'application/xml'
                )} 
                className="p-2 rounded-full bg-blue-600/80 text-white hover:bg-blue-600" 
                title="Herunterladen"
              >
                <Download size={16} />
              </button>
              <button 
                onClick={() => 
                  activeXmlTab === 'xrechnung' ? setXrechnungXML('') : 
                  activeXmlTab === 'en16931' ? setEn16931XML('') :
                  setSapXml('')
                } 
                className="p-2 rounded-full bg-white/50 text-gray-700 hover:bg-white/80" 
                title="Leeren"
              >
                <Trash2 size={16} />
              </button>
            </div>
          )}
        </div>
      </div>
    </>
);

// #endregion

// #region MAIN APP COMPONENT
// ============================================================================
const App = () => {
  // Set initial state with realistic dummy data
  const [formData, setFormData] = useState({
    senderName: 'Musterfirma GmbH',
    senderStreet: 'Hauptstraße 10',
    senderZip: '12345',
    senderCity: 'Berlin',
    senderCountry: 'DE',
    senderTaxId: 'DE123456789',
    senderContactName: 'Max Mustermann',
    senderContactPhone: '+49 30 1234567',
    senderContactEmail: 'max.mustermann@musterfirma.de',
    senderElectronicAddress: 'rechnung@musterfirma.de',
    recipientName: 'Käufer AG',
    recipientStreet: 'Beispielweg 5',
    recipientZip: '67890',
    recipientCity: 'München',
    recipientCountry: 'DE',
    recipientElectronicAddress: 'eingang@kaeufer.de',
    leitwegId: '04011000-12345-67',
    reference: 'RE-2025-001',
    invoiceDate: new Date().toISOString().slice(0, 10),
    serviceDate: new Date().toISOString().slice(0, 10),
    iban: 'DE12345678901234567890',
    bic: 'DEUTDEFFXXX',
    invoiceTypeCode: '380',
    invoiceCurrencyCode: 'EUR',
    paymentTerms: 'Zahlbar innerhalb von 30 Tagen ohne Abzug.',
    paymentMeansCode: '30',
    taxRate: '19',
    lineItems: [
        { id: 1, name: 'Beratungsleistung für Projekt X', unitCode: 'XPP', billedQuantity: '1', price: '1000.00', netAmount: '1000.00' }
    ],
    totalNetAmount: '1000.00',
    totalTaxAmount: '190.00',
    grossAmount: '1190.00',
  });

  const [xrechnungXML, setXrechnungXML] = useState('');
  const [en16931XML, setEn16931XML] = useState('');
  const [sapXml, setSapXml] = useState('');
  const [activeXmlTab, setActiveXmlTab] = useState('xrechnung');
  const [dataSource, setDataSource] = useState(null); // 'upload' oder 'ki' oder null
  const [loading, setLoading] = useState(false);
  const [loadingPrefill, setLoadingPrefill] = useState(false);
  const [currentPage, setCurrentPage] = useState('home'); // 'home', 'eRechnungMapping', 'sapMapping', 'layoutSelection'
  const [selectedLayout, setSelectedLayout] = useState('classic');
  const [sapMapping, setSapMapping] = useState(defaultSapMapping);
  const [message, setMessage] = useState('');
  const [messageType, setMessageType] = useState('info');
  const messageTimeoutRef = useRef(null);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [rowToDelete, setRowToDelete] = useState(null);
  const fileInputRef = useRef(null);
  const adminMenuRef = useRef(null);
  const [showSapIdModal, setShowSapIdModal] = useState(false);
  const [showAdminMenu, setShowAdminMenu] = useState(false);
  const [showXRechnungButton, setShowXRechnungButton] = useState(true);
  const [xrechnungTabEnabled, setXrechnungTabEnabled] = useState(true);
  const [showOptionalFields, setShowOptionalFields] = useState(false);
  const [kreditorId, setKreditorId] = useState('');
  const [buchungskreisId, setBuchungskreisId] = useState('');
  const [invoiceSummary, setInvoiceSummary] = useState('');
  const [loadingSummary, setLoadingSummary] = useState(false);
  const formRef = useRef(null);
  const previewContainerRef = useRef(null);
  const previewContentRef = useRef(null);
  const [previewTransform, setPreviewTransform] = useState(0);
  const [unmappedFields, setUnmappedFields] = useState([]);
  const [uploadStatus, setUploadStatus] = useState(null); // 'success', 'incomplete', null
  const [uploadedPdfData, setUploadedPdfData] = useState(null); // PDF-Daten für Anzeige
  const [showPdfPreview, setShowPdfPreview] = useState(false); // PDF vs HTML Vorschau


  // Effect for auto-calculation of totals
  useEffect(() => {
    const totalNet = formData.lineItems.reduce((sum, item) => sum + (parseFloat(item.netAmount) || 0), 0);
    const taxRate = parseFloat(formData.taxRate) || 0;
    const totalTax = totalNet * (taxRate / 100);
    const totalGross = totalNet + totalTax;

    setFormData(prev => ({
        ...prev,
        totalNetAmount: totalNet.toFixed(2),
        totalTaxAmount: totalTax.toFixed(2),
        grossAmount: totalGross.toFixed(2)
    }));
  }, [formData.lineItems, formData.taxRate]);

  // Handle message timeouts
  useEffect(() => {
    if (message) {
      if (messageTimeoutRef.current) clearTimeout(messageTimeoutRef.current);
      messageTimeoutRef.current = setTimeout(() => {
        setMessage('');
        setMessageType('info');
      }, 5000);
    }
    return () => {
      if (messageTimeoutRef.current) clearTimeout(messageTimeoutRef.current);
    };
  }, [message]);
  
  // Handle admin menu click outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (adminMenuRef.current && !adminMenuRef.current.contains(event.target)) {
        setShowAdminMenu(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);
  
  // Effect for parallax scroll effect
  useEffect(() => {
    if (currentPage !== 'home') return;

    const formColumn = formRef.current;
    const previewContent = previewContentRef.current;
    const previewContainer = previewContainerRef.current;

    if (!formColumn || !previewContent || !previewContainer) return;

    const handleScroll = () => {
        const formHeight = formColumn.scrollHeight;
        const previewHeight = previewContent.scrollHeight;
        const previewViewportHeight = previewContainer.clientHeight;

        if (previewHeight <= previewViewportHeight) {
            setPreviewTransform(0);
            return;
        }
        
        const maxPreviewTranslate = previewHeight - previewViewportHeight;
        const maxFormScroll = formHeight - window.innerHeight;
        if (maxFormScroll <= 0) {
            setPreviewTransform(0);
            return;
        }

        const currentScroll = window.scrollY;
        const scrollPercent = Math.min(currentScroll / maxFormScroll, 1);
        const newTransform = - (scrollPercent * maxPreviewTranslate);
        setPreviewTransform(Math.max(newTransform, -maxPreviewTranslate));
    };
    
    const resizeObserver = new ResizeObserver(handleScroll);
    resizeObserver.observe(formColumn);
    resizeObserver.observe(previewContent);

    window.addEventListener('scroll', handleScroll, { passive: true });
    handleScroll(); // Initial call

    return () => {
        window.removeEventListener('scroll', handleScroll);
        resizeObserver.disconnect();
    };
  }, [currentPage]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleLineItemChange = (id, field, value) => {
    setFormData(prev => ({
        ...prev,
        lineItems: prev.lineItems.map(item => {
            if (item.id === id) {
                const updatedItem = { ...item, [field]: value };
                if (field === 'billedQuantity' || field === 'price') {
                    const quantity = parseFloat(updatedItem.billedQuantity) || 0;
                    const price = parseFloat(updatedItem.price) || 0;
                    updatedItem.netAmount = (quantity * price).toFixed(2);
                }
                return updatedItem;
            }
            return item;
        })
    }));
  };

  const addLineItem = () => {
    setFormData(prev => ({
        ...prev,
        lineItems: [
            ...prev.lineItems,
            {
                id: (prev.lineItems[prev.lineItems.length - 1]?.id || 0) + 1,
                name: '',
                unitCode: 'XPP',
                billedQuantity: '1',
                price: '0.00',
                netAmount: '0.00'
            }
        ]
    }));
  };

  const removeLineItem = (id) => {
    setFormData(prev => ({
        ...prev,
        lineItems: prev.lineItems.filter(item => item.id !== id)
    }));
  };

  const showMessage = (text, type = 'info', format = '') => {
      setMessage(format ? `${format}\n${text}` : text);
      setMessageType(type);
  };
  




  const handleFileUpload = (e) => {
    console.log('=== DATEI UPLOAD GESTARTET ===');
    const file = e.target.files[0];
    if (!file) {
        console.log('Keine Datei ausgewählt');
        return;
    }

    // Unterstützte Dateitypen: XML und PDF (robuste Erkennung)
    const fileName = file.name.toLowerCase();
    const fileType = file.type.toLowerCase();
    
    console.log('Datei Details:');
    console.log('- Name:', file.name);
    console.log('- Typ:', file.type);
    console.log('- Größe:', file.size, 'bytes');
    console.log('- fileName (lowercase):', fileName);
    console.log('- fileType (lowercase):', fileType);
    
    const isXmlFile = fileType === 'text/xml' || 
                      fileType === 'application/xml' || 
                      fileName.endsWith('.xml');
                      
    const isPdfFile = fileType === 'application/pdf' || 
                      fileName.endsWith('.pdf');
    
    console.log('Dateityp-Prüfung:');
    console.log('- isXmlFile:', isXmlFile);
    console.log('- isPdfFile:', isPdfFile);
    
    if (!isXmlFile && !isPdfFile) {
        console.log('FEHLER: Dateityp nicht unterstützt');
        showMessage(`Nicht unterstützter Dateityp: "${file.name}" (${file.type}). Bitte laden Sie eine gültige XML- oder ZUGFeRD-PDF-Datei hoch.`, 'error');
        if (fileInputRef.current) { fileInputRef.current.value = null; }
        return;
    }

    if (isPdfFile) {
        console.log('PDF-Datei erkannt - starte PDF-Verarbeitung');
        showMessage('ZUGFeRD-PDF erkannt, extrahiere XML...', 'info');
        processPdfFile(file);
    } else {
        console.log('XML-Datei erkannt - starte XML-Verarbeitung');
        showMessage('XML-Datei erkannt, verarbeite...', 'info');
        processXmlFile(file);
    }
  };

  const processXmlFile = (file) => {
    console.log('=== XML-VERARBEITUNG GESTARTET ===');
    const reader = new FileReader();
    reader.onload = (event) => {
        const xmlContent = event.target.result;
        console.log('XML-Datei gelesen, Größe:', xmlContent.length, 'Zeichen');
        console.log('Encoding-Test - erste 100 Zeichen:', xmlContent.substring(0, 100));
        
        // Prüfe auf häufige Encoding-Probleme
        if (xmlContent.includes('�')) {
            console.warn('Mögliche Encoding-Probleme erkannt (Replacement Characters gefunden)');
        }
        
        parseXmlContent(xmlContent);
    };
    reader.onerror = (error) => {
        console.error('Fehler beim Lesen der XML-Datei:', error);
        showMessage('Fehler beim Lesen der XML-Datei.', 'error');
    };
    reader.readAsText(file, 'UTF-8');
  };

  const processPdfFile = (file) => {
    console.log('=== PDF-VERARBEITUNG GESTARTET ===');
    showMessage('Verarbeite ZUGFeRD-PDF...', 'info');
    const reader = new FileReader();
    reader.onload = async (event) => {
        try {
            console.log('PDF-Datei als ArrayBuffer gelesen, Größe:', event.target.result.byteLength, 'bytes');
            const pdfData = new Uint8Array(event.target.result);
            console.log('PDF-Daten konvertiert, starte XML-Extraktion...');
            const xmlContent = await extractXmlFromPdf(pdfData);
            
            if (xmlContent) {
                console.log('XML erfolgreich extrahiert, Größe:', xmlContent.length, 'Zeichen');
                
                // Speichere PDF-Daten für Anzeige
                const pdfBlob = new Blob([pdfData], { type: 'application/pdf' });
                const pdfUrl = URL.createObjectURL(pdfBlob);
                setUploadedPdfData(pdfUrl);
                setShowPdfPreview(true);
                
                showMessage('ZUGFeRD-PDF erkannt - PDF-Vorschau wird angezeigt', 'success');
                parseXmlContent(xmlContent);
            } else {
                console.log('Kein XML-Inhalt gefunden');
                showMessage('Kein ZUGFeRD XML-Anhang in der PDF-Datei gefunden.', 'error');
            }
        } catch (error) {
            console.error("Fehler beim Verarbeiten der PDF:", error);
            showMessage('Fehler beim Extrahieren des XML-Anhangs aus der PDF-Datei.', 'error');
        } finally {
            if (fileInputRef.current) {
                fileInputRef.current.value = null;
            }
        }
    };
    reader.onerror = (error) => {
        console.error('Fehler beim Lesen der PDF-Datei:', error);
        showMessage('Fehler beim Lesen der PDF-Datei.', 'error');
    };
    reader.readAsArrayBuffer(file);
  };

  const extractXmlFromPdf = async (pdfData) => {
    try {
        // Konvertiere PDF-Daten zu String für die Suche (UTF-8 kompatibel)
        const decoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: false });
        const pdfString = decoder.decode(pdfData);
        
        console.log('PDF-Größe:', pdfData.length, 'bytes');
        
        // Erweiterte Suche nach verschiedenen ZUGFeRD-XML-Patterns
        const xmlPatterns = [
            // Standard ZUGFeRD mit rsm Namespace
            /(<\?xml[^>]*?>[\s\S]*?<rsm:CrossIndustryInvoice[\s\S]*?<\/rsm:CrossIndustryInvoice>)/i,
            // ZUGFeRD ohne rsm Namespace
            /(<\?xml[^>]*?>[\s\S]*?<CrossIndustryInvoice[\s\S]*?<\/CrossIndustryInvoice>)/i,
            // Factur-X Format (französische Variante)
            /(<\?xml[^>]*?>[\s\S]*?<rsm:CrossIndustryDocument[\s\S]*?<\/rsm:CrossIndustryDocument>)/i,
            // UBL Format (XRechnung)
            /(<\?xml[^>]*?>[\s\S]*?<Invoice[\s\S]*?<\/Invoice>)/i
        ];
        
        let xmlContent = null;
        let detectedPattern = '';
        
        for (let i = 0; i < xmlPatterns.length; i++) {
            const match = pdfString.match(xmlPatterns[i]);
            if (match) {
                xmlContent = match[1];
                detectedPattern = `Pattern ${i + 1}`;
                console.log(`XML gefunden mit ${detectedPattern}`);
                break;
            }
        }
        
        if (!xmlContent) {
            // Fallback: Suche nach <?xml und versuche manuell zu extrahieren
            const xmlStartIndex = pdfString.indexOf('<?xml');
            if (xmlStartIndex !== -1) {
                console.log('XML-Start gefunden bei Index:', xmlStartIndex);
                
                // Suche nach möglichen End-Tags
                const endTags = [
                    '</rsm:CrossIndustryInvoice>',
                    '</CrossIndustryInvoice>',
                    '</rsm:CrossIndustryDocument>',
                    '</Invoice>'
                ];
                
                for (const endTag of endTags) {
                    const endIndex = pdfString.indexOf(endTag, xmlStartIndex);
                    if (endIndex !== -1) {
                        xmlContent = pdfString.substring(xmlStartIndex, endIndex + endTag.length);
                        console.log(`End-Tag gefunden: ${endTag}`);
                        break;
                    }
                }
            }
        }
        
        if (!xmlContent) {
            console.log('Kein XML-Inhalt in PDF gefunden');
            return null;
        }
        
        // Bereinige das XML (entferne mögliche PDF-spezifische Zeichen und Null-Bytes)
        xmlContent = xmlContent
            // eslint-disable-next-line no-control-regex
            .replace(/[\u0000-\u0008\u000B\u000C\u000E-\u001F\u007F]/g, '')  // Entferne Steuerzeichen
            .replace(/\0/g, '')  // Entferne Null-Bytes
            .trim();
        
        console.log('Extrahiertes XML (erste 200 Zeichen):', xmlContent.substring(0, 200));
        
        // Validiere das XML
        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(xmlContent, "application/xml");
        const parseError = xmlDoc.getElementsByTagName("parsererror");
        
        if (parseError.length > 0) {
            console.warn("XML Parse Error:", parseError[0].textContent);
            // Versuche weitere Bereinigung
            xmlContent = xmlContent.replace(/&(?![a-zA-Z0-9#]{1,6};)/g, '&amp;');
            const retryDoc = parser.parseFromString(xmlContent, "application/xml");
            const retryError = retryDoc.getElementsByTagName("parsererror");
            if (retryError.length > 0) {
                return null;
            }
        }
        
        return xmlContent;
    } catch (error) {
        console.error("Fehler beim Extrahieren des XML:", error);
        return null;
    }
  };

  const parseXmlContent = (xmlContent) => {
    try {
        // Normalisiere XML-Content für bessere Sonderzeichen-Behandlung
        const normalizedXml = xmlContent.normalize('NFC');
        
        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(normalizedXml, "application/xml");
        
        // Prüfe auf Parser-Fehler
        const parserError = xmlDoc.getElementsByTagName('parsererror');
        if (parserError.length > 0) {
            console.error('XML Parser Fehler:', parserError[0].textContent);
            throw new Error('XML-Parsing fehlgeschlagen: ' + parserError[0].textContent);
        }
        
        const ublNamespace = 'urn:oasis:names:specification:ubl:schema:xsd:Invoice-2';
        const ciiNamespace = 'urn:un:unece:uncefact:data:standard:CrossIndustryInvoice:100';
        
        let detectedFormat = '';
        let parsedResult = null;

        if (xmlDoc.documentElement.namespaceURI === ublNamespace) {
            detectedFormat = 'XRechnung 3.0.2 UBL erkannt';
            parsedResult = parseUBL(xmlDoc);
        } else if (xmlDoc.documentElement.lookupNamespaceURI('rsm') === ciiNamespace || 
                   xmlDoc.documentElement.tagName.includes('CrossIndustryInvoice')) {
            detectedFormat = 'ZUGFeRD Rechnung (CII) erkannt';
            parsedResult = parseCII(xmlDoc);
        } else {
            showMessage('Kein gültiges e-Rechnungsformat DE', 'error');
            return;
        }

        if (parsedResult && parsedResult.data) {
            setFormData(parsedResult.data);
            setUnmappedFields(parsedResult.unmapped);
            setXrechnungXML(xmlContent);
            setDataSource('upload'); // Markiere als Upload-Daten

            // Nach erfolgreichem Upload: SAP-XML automatisch generieren
            const autoGeneratedSapXml = generateSapXmlFromMapping(sapMapping, parsedResult.data, {
                kreditorId: '',
                buchungskreisId: ''
            });
            setSapXml(autoGeneratedSapXml);
            
            // XRechnung Tab deaktivieren und SAP Tab aktivieren
            setXrechnungTabEnabled(false);
            setActiveXmlTab('sap');
            setDataSource('upload');

            if (parsedResult.unmapped.length === 0) {
                setUploadStatus('success');
                showMessage('Rechnungsdaten erfolgreich erfasst und SAP-XML automatisch erstellt', 'success', detectedFormat);
            } else {
                setUploadStatus('incomplete');
                const fieldLabels = { senderName: 'Name (Sender)', recipientName: 'Name (Empfänger)', leitwegId: 'Leitweg-ID', reference: 'Rechnungsnummer', invoiceDate: 'Rechnungsdatum', grossAmount: 'Gesamtbetrag' };
                const missingFieldsMsg = parsedResult.unmapped.map(f => fieldLabels[f] || f).join(', ');
                showMessage(`Folgende Felder konnten nicht zugeordnet werden:\n- ${missingFieldsMsg}`, 'error', detectedFormat);
            }
            setTimeout(() => setUploadStatus(null), 2000);

        } else {
            throw new Error("Parsing fehlgeschlagen");
        }
    } catch (error) {
        console.error("Fehler beim Verarbeiten der XML:", error);
        showMessage('Fehler beim Mapping der Rechnungsdaten', 'error', 'Kein gültiges e-Rechnungsformat DE');
    }
  };
  
  const parseUBL = (xmlDoc) => {
    const nsResolver = (prefix) => ({'cac': 'urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2', 'cbc': 'urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2'})[prefix] || null;
    const getValue = (xpath, parent) => xmlDoc.evaluate(xpath, parent || xmlDoc, nsResolver, XPathResult.STRING_TYPE, null).stringValue.trim();
    const getAttribute = (xpath, attribute, parent) => {
        const result = xmlDoc.evaluate(xpath, parent || xmlDoc, nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        return result ? result.getAttribute(attribute) : '';
    };

    const supplierParty = xmlDoc.evaluate('//cac:AccountingSupplierParty/cac:Party', xmlDoc, nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    const customerParty = xmlDoc.evaluate('//cac:AccountingCustomerParty/cac:Party', xmlDoc, nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    const legalMonetaryTotal = xmlDoc.evaluate('//cac:LegalMonetaryTotal', xmlDoc, nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    const taxTotal = xmlDoc.evaluate('//cac:TaxTotal', xmlDoc, nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    const paymentMeans = xmlDoc.evaluate('//cac:PaymentMeans', xmlDoc, nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    const paymentTermsNode = xmlDoc.evaluate('//cac:PaymentTerms', xmlDoc, nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;

    const parsedLineItems = Array.from(xmlDoc.getElementsByTagNameNS('urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2', 'InvoiceLine')).map((item, index) => ({
        id: index + 1,
        name: getValue('.//cac:Item/cbc:Name', item),
        unitCode: getAttribute('.//cbc:InvoicedQuantity', 'unitCode', item),
        billedQuantity: getValue('.//cbc:InvoicedQuantity', item),
        price: getValue('.//cac:Price/cbc:PriceAmount', item),
        netAmount: getValue('.//cbc:LineExtensionAmount', item)
    }));
    
    const data = { ...blankFormData };
    const unmapped = Object.keys(blankFormData).filter(k => k !== 'lineItems');
    const mapValue = (key, value) => {
        // Setze Wert (auch wenn leer) und entferne aus unmapped Liste
        data[key] = value || '';
        const index = unmapped.indexOf(key);
        if (index > -1) unmapped.splice(index, 1);
    };

    mapValue('senderName', getValue('.//cac:PartyLegalEntity/cbc:RegistrationName', supplierParty) || getValue('.//cac:PartyName/cbc:Name', supplierParty));
    mapValue('senderStreet', getValue('.//cac:PostalAddress/cbc:StreetName', supplierParty));
    mapValue('senderZip', getValue('.//cac:PostalAddress/cbc:PostalZone', supplierParty));
    mapValue('senderCity', getValue('.//cac:PostalAddress/cbc:CityName', supplierParty));
    mapValue('senderCountry', getValue('.//cac:PostalAddress/cac:Country/cbc:IdentificationCode', supplierParty));
    mapValue('senderTaxId', getValue('.//cac:PartyTaxScheme/cbc:CompanyID', supplierParty));
    mapValue('senderContactName', getValue('.//cac:Contact/cbc:Name', supplierParty));
    mapValue('senderContactPhone', getValue('.//cac:Contact/cbc:Telephone', supplierParty));
    mapValue('senderContactEmail', getValue('.//cac:Contact/cbc:ElectronicMail', supplierParty));
    mapValue('senderElectronicAddress', getValue('.//cbc:EndpointID', supplierParty));
    mapValue('recipientName', getValue('.//cac:PartyLegalEntity/cbc:RegistrationName', customerParty) || getValue('.//cac:PartyName/cbc:Name', customerParty));
    mapValue('recipientStreet', getValue('.//cac:PostalAddress/cbc:StreetName', customerParty));
    mapValue('recipientZip', getValue('.//cac:PostalAddress/cbc:PostalZone', customerParty));
    mapValue('recipientCity', getValue('.//cac:PostalAddress/cbc:CityName', customerParty));
    mapValue('recipientCountry', getValue('.//cac:PostalAddress/cac:Country/cbc:IdentificationCode', customerParty));
    mapValue('recipientElectronicAddress', getValue('.//cbc:EndpointID', customerParty));
    mapValue('leitwegId', getValue('//cbc:BuyerReference'));
    mapValue('reference', getValue('//cbc:ID'));
    mapValue('invoiceDate', getValue('//cbc:IssueDate'));
    mapValue('serviceDate', getValue('//cac:Delivery/cbc:ActualDeliveryDate') || getValue('//cbc:DueDate'));
    mapValue('iban', getValue('.//cac:PayeeFinancialAccount/cbc:ID', paymentMeans));
    mapValue('bic', getValue('.//cac:PayeeFinancialAccount/cac:FinancialInstitutionBranch/cbc:ID', paymentMeans));
    mapValue('paymentMeansCode', getValue('.//cbc:PaymentMeansCode', paymentMeans));
    mapValue('paymentTerms', getValue('.//cbc:Note', paymentTermsNode));
    mapValue('invoiceTypeCode', getValue('//cbc:InvoiceTypeCode'));
    mapValue('invoiceCurrencyCode', getValue('//cbc:DocumentCurrencyCode'));
    mapValue('taxRate', parseInt(getValue('.//cac:TaxSubtotal/cac:TaxCategory/cbc:Percent', taxTotal) || '0', 10).toString());
    
    // Neue optionale Felder parsen
    mapValue('orderReference', getValue('//cac:OrderReference/cbc:ID'));
    mapValue('contractReference', getValue('//cac:ContractDocumentReference/cbc:ID'));
    mapValue('precedingInvoiceReference', getValue('//cac:BillingReference/cac:InvoiceDocumentReference/cbc:ID'));
    mapValue('paymentDueDate', getValue('//cbc:DueDate'));
    mapValue('documentLevelAllowance', getValue('//cac:AllowanceCharge[cbc:ChargeIndicator="false"]/cbc:Amount'));
    mapValue('documentLevelCharge', getValue('//cac:AllowanceCharge[cbc:ChargeIndicator="true"]/cbc:Amount'));
    
    if (parsedLineItems.length > 0) data.lineItems = parsedLineItems;
    mapValue('totalNetAmount', getValue('.//cbc:TaxExclusiveAmount', legalMonetaryTotal));
    mapValue('totalTaxAmount', getValue('.//cbc:TaxAmount', taxTotal));
    mapValue('grossAmount', getValue('.//cbc:TaxInclusiveAmount', legalMonetaryTotal));

    return { data, unmapped };
  };

  const parseCII = (xmlDoc) => {
      const nsResolver = (prefix) => ({ 'ram': 'urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100', 'rsm': 'urn:un:unece:uncefact:data:standard:CrossIndustryInvoice:100', 'udt': 'urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100' })[prefix] || null;
      const getValue = (xpath, parent) => xmlDoc.evaluate(xpath, parent || xmlDoc, nsResolver, XPathResult.STRING_TYPE, null).stringValue.trim();
      const getAttribute = (xpath, attribute, parent) => {
        const result = xmlDoc.evaluate(xpath, parent || xmlDoc, nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        return result ? result.getAttribute(attribute) : '';
      };

      const tradeTransaction = xmlDoc.evaluate('//rsm:SupplyChainTradeTransaction', xmlDoc, nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
      const header = xmlDoc.evaluate('.//ram:ApplicableHeaderTradeAgreement', tradeTransaction, nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
      const settlement = xmlDoc.evaluate('.//ram:ApplicableHeaderTradeSettlement', tradeTransaction, nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
      const sellerParty = xmlDoc.evaluate('.//ram:SellerTradeParty', header, nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
      const buyerParty = xmlDoc.evaluate('.//ram:BuyerTradeParty', header, nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
      const monetarySummation = xmlDoc.evaluate('.//ram:SpecifiedTradeSettlementHeaderMonetarySummation', settlement, nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
      
      const parsedLineItems = Array.from(xmlDoc.getElementsByTagNameNS('urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100', 'IncludedSupplyChainTradeLineItem')).map((item, index) => {
          const lineSettlement = xmlDoc.evaluate('.//ram:SpecifiedTradeSettlementLineMonetarySummation', item, nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
          const tradeAgreement = xmlDoc.evaluate('.//ram:SpecifiedLineTradeAgreement', item, nsResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
          return { id: index + 1, name: getValue('.//ram:SpecifiedTradeProduct/ram:Name', item), unitCode: getAttribute('.//ram:BilledQuantity', 'unitCode', item), billedQuantity: getValue('.//ram:BilledQuantity', item), price: getValue('.//ram:GrossPriceProductTradePrice/ram:ChargeAmount', tradeAgreement), netAmount: getValue('.//ram:LineTotalAmount', lineSettlement) };
      });

      const data = { ...blankFormData };
      const unmapped = Object.keys(blankFormData).filter(k => k !== 'lineItems');
      const mapValue = (key, value) => {
        // Setze Wert (auch wenn leer) und entferne aus unmapped Liste
        data[key] = value || '';
        const index = unmapped.indexOf(key);
        if (index > -1) unmapped.splice(index, 1);
      };
      
      const issueDate = getValue('//rsm:ExchangedDocument/ram:IssueDateTime/udt:DateTimeString');
      const deliveryDate = getValue('.//ram:ActualDeliverySupplyChainEvent/ram:OccurrenceDateTime/udt:DateTimeString', tradeTransaction);

      mapValue('senderName', getValue('.//ram:Name', sellerParty));
      mapValue('senderStreet', getValue('.//ram:PostalTradeAddress/ram:LineOne', sellerParty));
      mapValue('senderZip', getValue('.//ram:PostalTradeAddress/ram:PostcodeCode', sellerParty));
      mapValue('senderCity', getValue('.//ram:PostalTradeAddress/ram:CityName', sellerParty));
      mapValue('senderCountry', getValue('.//ram:PostalTradeAddress/ram:CountryID', sellerParty));
      mapValue('senderTaxId', getValue('.//ram:SpecifiedTaxRegistration/ram:ID', sellerParty));
      mapValue('senderContactName', getValue('.//ram:DefinedTradeContact/ram:PersonName', sellerParty));
      mapValue('senderContactPhone', getValue('.//ram:DefinedTradeContact/ram:TelephoneUniversalCommunication/ram:CompleteNumber', sellerParty));
      mapValue('senderContactEmail', getValue('.//ram:DefinedTradeContact/ram:EmailURIUniversalCommunication/ram:URIID', sellerParty));
      mapValue('senderElectronicAddress', getValue('.//ram:URIUniversalCommunication/ram:URIID', sellerParty));
      mapValue('recipientName', getValue('.//ram:Name', buyerParty));
      mapValue('recipientStreet', getValue('.//ram:PostalTradeAddress/ram:LineOne', buyerParty));
      mapValue('recipientZip', getValue('.//ram:PostalTradeAddress/ram:PostcodeCode', buyerParty));
      mapValue('recipientCity', getValue('.//ram:PostalTradeAddress/ram:CityName', buyerParty));
      mapValue('recipientCountry', getValue('.//ram:PostalTradeAddress/ram:CountryID', buyerParty));
      mapValue('recipientElectronicAddress', getValue('.//ram:URIUniversalCommunication/ram:URIID', buyerParty));
      mapValue('leitwegId', getValue('.//ram:BuyerReference', header));
      mapValue('reference', getValue('//rsm:ExchangedDocument/ram:ID'));
      mapValue('invoiceDate', issueDate ? issueDate.substring(0, 8).replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3') : '');
      mapValue('serviceDate', deliveryDate ? deliveryDate.substring(0, 8).replace(/(\d{4})(\d{2})(\d{2})/, '$1-$2-$3') : '');
      mapValue('iban', getValue('.//ram:PayeePartyCreditorFinancialAccount/ram:IBANID', settlement));
      // Erweiterte Suche für BIC (BT-86) - verschiedene mögliche Pfade
      console.log('=== BIC SUCHE (BT-86) ===');
      let bicValue1 = getValue('.//ram:PayeePartyCreditorFinancialAccount/ram:ProprietaryID', settlement);
      let bicValue2 = getValue('.//ram:SpecifiedTradeSettlementPaymentMeans/ram:PayeePartyCreditorFinancialAccount/ram:ProprietaryID', settlement);
      let bicValue3 = getValue('.//ram:PayeeSpecifiedCreditorFinancialInstitution/ram:BICID', settlement);
      let bicValue4 = getValue('.//ram:SpecifiedTradeSettlementPaymentMeans/ram:PayeeSpecifiedCreditorFinancialInstitution/ram:BICID', settlement);
      let bicValue5 = getValue('.//ram:PayeePartyCreditorFinancialAccount/ram:PayeeSpecifiedCreditorFinancialInstitution/ram:BICID', settlement);
      let bicValue6 = getValue('.//ram:SpecifiedTradeSettlementPaymentMeans/ram:PayeePartyCreditorFinancialAccount/ram:PayeeSpecifiedCreditorFinancialInstitution/ram:BICID', settlement);
      
      console.log('BIC Pfad 1 (Standard):', bicValue1);
      console.log('BIC Pfad 2 (PaymentMeans):', bicValue2);
      console.log('BIC Pfad 3 (BICID):', bicValue3);
      console.log('BIC Pfad 4 (PaymentMeans/BICID):', bicValue4);
      console.log('BIC Pfad 5 (Nested BICID):', bicValue5);
      console.log('BIC Pfad 6 (PaymentMeans/Nested BICID):', bicValue6);
      
      let bicValue = bicValue1 || bicValue2 || bicValue3 || bicValue4 || bicValue5 || bicValue6;
      console.log('Finaler BIC Wert:', bicValue);
      mapValue('bic', bicValue);
      
      mapValue('paymentMeansCode', getValue('.//ram:SpecifiedTradeSettlementPaymentMeans/ram:TypeCode', settlement));
      
      // Erweiterte Suche für Zahlungsbedingungen (BT-20) - verschiedene mögliche Pfade
      console.log('=== ZAHLUNGSBEDINGUNGEN SUCHE (BT-20) ===');
      let paymentTermsValue1 = getValue('.//ram:ApplicableTradePaymentTerms/ram:Description', settlement);
      let paymentTermsValue2 = getValue('.//ram:SpecifiedTradePaymentTerms/ram:Description', settlement);
      let paymentTermsValue3 = getValue('.//ram:ApplicableHeaderTradeSettlement/ram:ApplicableTradePaymentTerms/ram:Description', tradeTransaction);
      let paymentTermsValue4 = getValue('.//ram:ApplicableTradePaymentTerms/ram:Description', tradeTransaction);
      
      console.log('PaymentTerms Pfad 1:', paymentTermsValue1);
      console.log('PaymentTerms Pfad 2:', paymentTermsValue2);
      console.log('PaymentTerms Pfad 3:', paymentTermsValue3);
      console.log('PaymentTerms Pfad 4:', paymentTermsValue4);
      
      let paymentTermsValue = paymentTermsValue1 || paymentTermsValue2 || paymentTermsValue3 || paymentTermsValue4;
      console.log('Finale PaymentTerms:', paymentTermsValue);
      mapValue('paymentTerms', paymentTermsValue);
      mapValue('invoiceTypeCode', getValue('//rsm:ExchangedDocument/ram:TypeCode'));
      mapValue('invoiceCurrencyCode', getValue('.//ram:InvoiceCurrencyCode', settlement));
      mapValue('taxRate', parseInt(getValue('.//ram:ApplicableTradeTax/ram:RateApplicablePercent', settlement) || '0', 10).toString());
      
      // Neue optionale Felder für ZUGFeRD parsen
      mapValue('orderReference', getValue('.//ram:BuyerOrderReferencedDocument/ram:IssuerAssignedID', header));
      mapValue('contractReference', getValue('.//ram:ContractReferencedDocument/ram:IssuerAssignedID', header));
      mapValue('precedingInvoiceReference', getValue('.//ram:InvoiceReferencedDocument/ram:IssuerAssignedID', header));
      mapValue('paymentDueDate', getValue('.//ram:DueDateDateTime', settlement));
      mapValue('documentLevelAllowance', getValue('.//ram:SpecifiedTradeAllowanceCharge[ram:ChargeIndicator="false"]/ram:ActualAmount', settlement));
      mapValue('documentLevelCharge', getValue('.//ram:SpecifiedTradeAllowanceCharge[ram:ChargeIndicator="true"]/ram:ActualAmount', settlement));
      
      if (parsedLineItems.length > 0) data.lineItems = parsedLineItems;
      mapValue('totalNetAmount', getValue('.//ram:TaxBasisTotalAmount', monetarySummation));
      mapValue('totalTaxAmount', getValue('.//ram:TaxTotalAmount', monetarySummation));
      mapValue('grossAmount', getValue('.//ram:GrandTotalAmount', monetarySummation));
      
      return { data, unmapped };
  };
  
  const handleUploadClick = () => {
    console.log('Upload-Button geklickt');
    
    // Zurücksetzen vor neuem Upload
    setXrechnungXML('');
    setEn16931XML('');
    setSapXml('');
    setUnmappedFields([]);
    setShowXRechnungButton(false);
    setShowPdfPreview(false);
    
    // File Input zurücksetzen und klicken
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
      fileInputRef.current.click();
    }
  };

  // Test-Funktion für Debugging (kann in der Browser-Konsole aufgerufen werden)
  window.testFileUpload = () => {
    console.log('=== TEST UPLOAD FUNKTION ===');
    console.log('fileInputRef:', fileInputRef.current);
    console.log('handleFileUpload:', typeof handleFileUpload);
    return 'Test-Funktion verfügbar. Laden Sie eine Datei hoch und schauen Sie in die Konsole.';
  };
  
  const validateFormData = () => {
    const issueDate = new Date(formData.invoiceDate);
    issueDate.setHours(0, 0, 0, 0);
    const serviceDate = new Date(formData.serviceDate);
    serviceDate.setHours(0, 0, 0, 0);

    if (serviceDate < issueDate) {
        showMessage('Das Leistungsdatum darf nicht vor dem Rechnungsdatum liegen.', 'error');
        return false;
    }

    const requiredFields = {
      'BT-1': { value: formData.reference, label: 'Rechnungsnummer' },
      'BT-2': { value: formData.invoiceDate, label: 'Rechnungsdatum' },
      'BT-27': { value: formData.senderName, label: 'Name des Rechnungsstellers' },
      'BT-44': { value: formData.recipientName, label: 'Name des Rechnungsempfängers' },
    };

    const missingFields = Object.entries(requiredFields).filter(([, field]) => !field.value);

    if (missingFields.length > 0) {
      const missingFieldNames = missingFields.map(([btId, field]) => `${field.label} (${btId})`).join(', ');
      showMessage(`Wichtige Pflichtfelder fehlen: ${missingFieldNames}`, 'error');
      return false;
    }
    
    for (const item of formData.lineItems) {
        if (!item.name || !item.billedQuantity || !item.price || !item.unitCode) {
            showMessage(`Alle Felder in Rechnungsposition ${item.id} müssen ausgefüllt sein.`, 'error');
            return false;
        }
    }
    
    return true;
  };
  


  const generateXRechnungUBL = async () => {
    // Erweiterte Validierung mit EN16931/XRechnung-spezifischen Regeln
    const validation = validateEN16931Fields(formData);
    if (validation.errors.length > 0) {
      showMessage(`Validierungsfehler:\n${validation.errors.join('\n')}`, 'error');
      return;
    }
    
    // Zeige Warnungen an, aber blockiere nicht
    if (validation.warnings.length > 0) {
      showMessage(`Warnungen:\n${validation.warnings.join('\n')}`, 'warning');
    }

    // Alte Validierung als Fallback
    if (!validateFormData()) return;

    setLoading(true);
    setXrechnungXML('');
    setEn16931XML('');
    setSapXml('');

    try {
      // Wende Defaults auf Formulardaten an
      const enhancedFormData = applyFieldDefaults(formData);
      
      const taxRate = parseFloat(enhancedFormData.taxRate);
      if (isNaN(taxRate)) throw new Error('Steuersatz muss eine gültige Zahl sein.');

      const lineItemsXML = enhancedFormData.lineItems.map((item, index) => `
    <cac:InvoiceLine>
        <cbc:ID>${index + 1}</cbc:ID>
        <cbc:InvoicedQuantity unitCode="${escapeXml(item.unitCode || 'XPP')}">${parseFloat(item.billedQuantity).toFixed(2)}</cbc:InvoicedQuantity>
        <cbc:LineExtensionAmount currencyID="${escapeXml(enhancedFormData.invoiceCurrencyCode)}">${parseFloat(item.netAmount).toFixed(2)}</cbc:LineExtensionAmount>
        <cac:Item>
            <cbc:Name>${escapeXml(item.name)}</cbc:Name>
            <cac:ClassifiedTaxCategory><cbc:ID>S</cbc:ID><cbc:Percent>${taxRate.toFixed(2)}</cbc:Percent><cac:TaxScheme><cbc:ID>VAT</cbc:ID></cac:TaxScheme></cac:ClassifiedTaxCategory>
        </cac:Item>
        <cac:Price><cbc:PriceAmount currencyID="${escapeXml(enhancedFormData.invoiceCurrencyCode)}">${parseFloat(item.price).toFixed(2)}</cbc:PriceAmount></cac:Price>
    </cac:InvoiceLine>`).join('');

      // Generiere erweiterte XML mit optionalen Feldern
      const generateDocumentReferences = () => {
        let refs = '';
        if (enhancedFormData.orderReference) {
          refs += `\n    <cac:OrderReference><cbc:ID>${escapeXml(enhancedFormData.orderReference)}</cbc:ID></cac:OrderReference>`;
        }
        if (enhancedFormData.contractReference) {
          refs += `\n    <cac:ContractDocumentReference><cbc:ID>${escapeXml(enhancedFormData.contractReference)}</cbc:ID></cac:ContractDocumentReference>`;
        }
        if (enhancedFormData.precedingInvoiceReference && enhancedFormData.invoiceTypeCode === '384') {
          refs += `\n    <cac:BillingReference><cac:InvoiceDocumentReference><cbc:ID>${escapeXml(enhancedFormData.precedingInvoiceReference)}</cbc:ID></cac:InvoiceDocumentReference></cac:BillingReference>`;
        }
        return refs;
      };

      const generateDeliveryInfo = () => {
        if (enhancedFormData.serviceDate) {
          return `\n    <cac:Delivery><cbc:ActualDeliveryDate>${enhancedFormData.serviceDate}</cbc:ActualDeliveryDate></cac:Delivery>`;
        }
        return '';
      };

      const xmlString = `<?xml version="1.0" encoding="UTF-8"?>
<Invoice xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2">
    <cbc:CustomizationID>urn:cen.eu:en16931:2017#compliant#urn:xeinkauf.de:kosit:xrechnung_3.0</cbc:CustomizationID>
    <cbc:ProfileID>urn:fdc:peppol.eu:2017:poacc:billing:3.0</cbc:ProfileID>
    <cbc:ID>${escapeXml(enhancedFormData.reference)}</cbc:ID>
    <cbc:IssueDate>${enhancedFormData.invoiceDate}</cbc:IssueDate>
    ${enhancedFormData.paymentDueDate ? `<cbc:DueDate>${enhancedFormData.paymentDueDate}</cbc:DueDate>` : ''}
    <cbc:InvoiceTypeCode>${enhancedFormData.invoiceTypeCode}</cbc:InvoiceTypeCode>
    <cbc:DocumentCurrencyCode>${escapeXml(enhancedFormData.invoiceCurrencyCode)}</cbc:DocumentCurrencyCode>
    <cbc:BuyerReference>${escapeXml(enhancedFormData.leitwegId)}</cbc:BuyerReference>${generateDocumentReferences()}
    <cac:AccountingSupplierParty>
        <cac:Party>
            ${enhancedFormData.senderElectronicAddress ? `<cbc:EndpointID schemeID="EM">${escapeXml(enhancedFormData.senderElectronicAddress)}</cbc:EndpointID>` : ''}
            <cac:PartyLegalEntity>
                <cbc:RegistrationName>${escapeXml(enhancedFormData.senderName)}</cbc:RegistrationName>
            </cac:PartyLegalEntity>
            ${enhancedFormData.senderStreet || enhancedFormData.senderCity || enhancedFormData.senderZip ? `
            <cac:PostalAddress>
                ${enhancedFormData.senderStreet ? `<cbc:StreetName>${escapeXml(enhancedFormData.senderStreet)}</cbc:StreetName>` : ''}
                ${enhancedFormData.senderCity ? `<cbc:CityName>${escapeXml(enhancedFormData.senderCity)}</cbc:CityName>` : ''}
                ${enhancedFormData.senderZip ? `<cbc:PostalZone>${escapeXml(enhancedFormData.senderZip)}</cbc:PostalZone>` : ''}
                <cac:Country>
                    <cbc:IdentificationCode>${escapeXml(enhancedFormData.senderCountry)}</cbc:IdentificationCode>
                </cac:Country>
            </cac:PostalAddress>` : `
            <cac:PostalAddress>
                <cac:Country>
                    <cbc:IdentificationCode>${escapeXml(enhancedFormData.senderCountry)}</cbc:IdentificationCode>
                </cac:Country>
            </cac:PostalAddress>`}
            <cac:PartyTaxScheme>
                <cbc:CompanyID>${escapeXml(enhancedFormData.senderTaxId)}</cbc:CompanyID>
                <cac:TaxScheme>
                    <cbc:ID>VAT</cbc:ID>
                </cac:TaxScheme>
            </cac:PartyTaxScheme>
            ${enhancedFormData.senderContactName || enhancedFormData.senderContactPhone || enhancedFormData.senderContactEmail ? `
            <cac:Contact>
                ${enhancedFormData.senderContactName ? `<cbc:Name>${escapeXml(enhancedFormData.senderContactName)}</cbc:Name>` : ''}
                ${enhancedFormData.senderContactPhone ? `<cbc:Telephone>${escapeXml(enhancedFormData.senderContactPhone)}</cbc:Telephone>` : ''}
                ${enhancedFormData.senderContactEmail ? `<cbc:ElectronicMail>${escapeXml(enhancedFormData.senderContactEmail)}</cbc:ElectronicMail>` : ''}
            </cac:Contact>` : ''}
        </cac:Party>
    </cac:AccountingSupplierParty>
    <cac:AccountingCustomerParty>
        <cac:Party>
            ${enhancedFormData.recipientElectronicAddress ? `<cbc:EndpointID schemeID="EM">${escapeXml(enhancedFormData.recipientElectronicAddress)}</cbc:EndpointID>` : ''}
            <cac:PartyLegalEntity>
                <cbc:RegistrationName>${escapeXml(enhancedFormData.recipientName)}</cbc:RegistrationName>
            </cac:PartyLegalEntity>
            ${enhancedFormData.recipientStreet || enhancedFormData.recipientCity || enhancedFormData.recipientZip ? `
            <cac:PostalAddress>
                ${enhancedFormData.recipientStreet ? `<cbc:StreetName>${escapeXml(enhancedFormData.recipientStreet)}</cbc:StreetName>` : ''}
                ${enhancedFormData.recipientCity ? `<cbc:CityName>${escapeXml(enhancedFormData.recipientCity)}</cbc:CityName>` : ''}
                ${enhancedFormData.recipientZip ? `<cbc:PostalZone>${escapeXml(enhancedFormData.recipientZip)}</cbc:PostalZone>` : ''}
                <cac:Country>
                    <cbc:IdentificationCode>${escapeXml(enhancedFormData.recipientCountry)}</cbc:IdentificationCode>
                </cac:Country>
            </cac:PostalAddress>` : `
            <cac:PostalAddress>
                <cac:Country>
                    <cbc:IdentificationCode>${escapeXml(enhancedFormData.recipientCountry)}</cbc:IdentificationCode>
                </cac:Country>
            </cac:PostalAddress>`}
        </cac:Party>
    </cac:AccountingCustomerParty>${generateDeliveryInfo()}
    ${enhancedFormData.iban || enhancedFormData.bic ? `<cac:PaymentMeans>
        <cbc:PaymentMeansCode>${enhancedFormData.paymentMeansCode || '58'}</cbc:PaymentMeansCode>
        ${enhancedFormData.iban ? `<cac:PayeeFinancialAccount>
            <cbc:ID>${escapeXml(enhancedFormData.iban)}</cbc:ID>
            ${enhancedFormData.bic ? `<cac:FinancialInstitutionBranch>
                <cbc:ID>${escapeXml(enhancedFormData.bic)}</cbc:ID>
            </cac:FinancialInstitutionBranch>` : ''}
        </cac:PayeeFinancialAccount>` : ''}
    </cac:PaymentMeans>` : ''}
    <cac:PaymentTerms>
        <cbc:Note>${escapeXml(enhancedFormData.paymentTerms || 'Zahlbar innerhalb von 30 Tagen')}</cbc:Note>
    </cac:PaymentTerms>
    <cac:TaxTotal>
        <cbc:TaxAmount currencyID="${escapeXml(enhancedFormData.invoiceCurrencyCode)}">${enhancedFormData.totalTaxAmount}</cbc:TaxAmount>
        <cac:TaxSubtotal>
            <cbc:TaxableAmount currencyID="${escapeXml(enhancedFormData.invoiceCurrencyCode)}">${enhancedFormData.totalNetAmount}</cbc:TaxableAmount>
            <cbc:TaxAmount currencyID="${escapeXml(enhancedFormData.invoiceCurrencyCode)}">${enhancedFormData.totalTaxAmount}</cbc:TaxAmount>
            <cac:TaxCategory>
                <cbc:ID>S</cbc:ID>
                <cbc:Percent>${taxRate.toFixed(2)}</cbc:Percent>
                <cac:TaxScheme>
                    <cbc:ID>VAT</cbc:ID>
                </cac:TaxScheme>
            </cac:TaxCategory>
        </cac:TaxSubtotal>
    </cac:TaxTotal>
    <cac:LegalMonetaryTotal>
        <cbc:LineExtensionAmount currencyID="${escapeXml(enhancedFormData.invoiceCurrencyCode)}">${enhancedFormData.totalNetAmount}</cbc:LineExtensionAmount>
        <cbc:TaxExclusiveAmount currencyID="${escapeXml(enhancedFormData.invoiceCurrencyCode)}">${enhancedFormData.totalNetAmount}</cbc:TaxExclusiveAmount>
        <cbc:TaxInclusiveAmount currencyID="${escapeXml(enhancedFormData.invoiceCurrencyCode)}">${enhancedFormData.grossAmount}</cbc:TaxInclusiveAmount>
        <cbc:PayableAmount currencyID="${escapeXml(enhancedFormData.invoiceCurrencyCode)}">${enhancedFormData.grossAmount}</cbc:PayableAmount>
    </cac:LegalMonetaryTotal>
    ${lineItemsXML}
</Invoice>`;
      
      setXrechnungXML(xmlString);
      
      // Parallel EN16931 generieren (ohne separaten Loading-State)
      const en16931LineItemsXML = formData.lineItems.map((item, index) => `
    <InvoiceLine>
        <ID>${index + 1}</ID>
        <InvoicedQuantity unitCode="${escapeXml(item.unitCode)}">${parseFloat(item.billedQuantity).toFixed(2)}</InvoicedQuantity>
        <LineExtensionAmount currencyID="${escapeXml(formData.invoiceCurrencyCode)}">${parseFloat(item.netAmount).toFixed(2)}</LineExtensionAmount>
        <Item>
            <Name>${escapeXml(item.name)}</Name>
            <ClassifiedTaxCategory>
                <ID>S</ID>
                <Percent>${taxRate.toFixed(2)}</Percent>
                <TaxScheme>
                    <ID>VAT</ID>
                </TaxScheme>
            </ClassifiedTaxCategory>
        </Item>
        <Price>
            <PriceAmount currencyID="${escapeXml(formData.invoiceCurrencyCode)}">${parseFloat(item.price).toFixed(2)}</PriceAmount>
        </Price>
    </InvoiceLine>`).join('');

      const en16931XmlString = `<?xml version="1.0" encoding="UTF-8"?>
<Invoice xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2">
    <CustomizationID>urn:cen.eu:en16931:2017</CustomizationID>
    <ProfileID>urn:fdc:peppol.eu:2017:poacc:billing:3.0</ProfileID>
    <ID>${escapeXml(formData.reference)}</ID>
    <IssueDate>${formData.invoiceDate}</IssueDate>
    <DueDate>${formData.serviceDate}</DueDate>
    <InvoiceTypeCode>${formData.invoiceTypeCode}</InvoiceTypeCode>
    <DocumentCurrencyCode>${escapeXml(formData.invoiceCurrencyCode)}</DocumentCurrencyCode>
    <BuyerReference>${escapeXml(formData.leitwegId)}</BuyerReference>
    <PaymentTerms>
        <Note>${escapeXml(formData.paymentTerms)}</Note>
    </PaymentTerms>
    <AccountingSupplierParty>
        <Party>
            <EndpointID schemeID="EM">${escapeXml(formData.senderElectronicAddress)}</EndpointID>
            <PartyLegalEntity>
                <RegistrationName>${escapeXml(formData.senderName)}</RegistrationName>
            </PartyLegalEntity>
            <PostalAddress>
                <StreetName>${escapeXml(formData.senderStreet)}</StreetName>
                <CityName>${escapeXml(formData.senderCity)}</CityName>
                <PostalZone>${escapeXml(formData.senderZip)}</PostalZone>
                <Country>
                    <IdentificationCode>${escapeXml(formData.senderCountry)}</IdentificationCode>
                </Country>
            </PostalAddress>
            <PartyTaxScheme>
                <CompanyID>${escapeXml(formData.senderTaxId)}</CompanyID>
                <TaxScheme>
                    <ID>VAT</ID>
                </TaxScheme>
            </PartyTaxScheme>
            <Contact>
                <Name>${escapeXml(formData.senderContactName)}</Name>
                <Telephone>${escapeXml(formData.senderContactPhone)}</Telephone>
                <ElectronicMail>${escapeXml(formData.senderContactEmail)}</ElectronicMail>
            </Contact>
        </Party>
    </AccountingSupplierParty>
    <AccountingCustomerParty>
        <Party>
            <EndpointID schemeID="EM">${escapeXml(formData.recipientElectronicAddress)}</EndpointID>
            <PartyLegalEntity>
                <RegistrationName>${escapeXml(formData.recipientName)}</RegistrationName>
            </PartyLegalEntity>
            <PostalAddress>
                <StreetName>${escapeXml(formData.recipientStreet)}</StreetName>
                <CityName>${escapeXml(formData.recipientCity)}</CityName>
                <PostalZone>${escapeXml(formData.recipientZip)}</PostalZone>
                <Country>
                    <IdentificationCode>${escapeXml(formData.recipientCountry)}</IdentificationCode>
                </Country>
            </PostalAddress>
        </Party>
    </AccountingCustomerParty>
    <PaymentMeans>
        <PaymentMeansCode>${formData.paymentMeansCode}</PaymentMeansCode>
        <PayeeFinancialAccount>
            <ID>${escapeXml(formData.iban)}</ID>
            <FinancialInstitutionBranch>
                <ID>${escapeXml(formData.bic)}</ID>
            </FinancialInstitutionBranch>
        </PayeeFinancialAccount>
    </PaymentMeans>
    <TaxTotal>
        <TaxAmount currencyID="${escapeXml(formData.invoiceCurrencyCode)}">${formData.totalTaxAmount}</TaxAmount>
        <TaxSubtotal>
            <TaxableAmount currencyID="${escapeXml(formData.invoiceCurrencyCode)}">${formData.totalNetAmount}</TaxableAmount>
            <TaxAmount currencyID="${escapeXml(formData.invoiceCurrencyCode)}">${formData.totalTaxAmount}</TaxAmount>
            <TaxCategory>
                <ID>S</ID>
                <Percent>${taxRate.toFixed(2)}</Percent>
                <TaxScheme>
                    <ID>VAT</ID>
                </TaxScheme>
            </TaxCategory>
        </TaxSubtotal>
    </TaxTotal>
    <LegalMonetaryTotal>
        <LineExtensionAmount currencyID="${escapeXml(formData.invoiceCurrencyCode)}">${formData.totalNetAmount}</LineExtensionAmount>
        <TaxExclusiveAmount currencyID="${escapeXml(formData.invoiceCurrencyCode)}">${formData.totalNetAmount}</TaxExclusiveAmount>
        <TaxInclusiveAmount currencyID="${escapeXml(formData.invoiceCurrencyCode)}">${formData.grossAmount}</TaxInclusiveAmount>
        <PayableAmount currencyID="${escapeXml(formData.invoiceCurrencyCode)}">${formData.grossAmount}</PayableAmount>
    </LegalMonetaryTotal>
    ${en16931LineItemsXML}
</Invoice>`;
      
      setEn16931XML(en16931XmlString);
      setActiveXmlTab('xrechnung'); // Automatisch zum XRechnung-Tab wechseln
      
      showMessage('Valide XRechnung 3.0.2 UBL und EN16931 erfolgreich erstellt!', 'success');
      
      // Scroll zur Vorschau-Sektion
      setTimeout(() => {
        const previewSection = document.querySelector('h2[class*="text-2xl"]:last-of-type');
        if (previewSection && previewSection.textContent.includes('Vorschau')) {
          previewSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      }, 100);
    } catch (error) {
      console.error('Fehler bei der Generierung der XRechnung:', error);
      showMessage(error.message || 'Fehler bei der Generierung.', 'error');
    } finally {
      setLoading(false);
    }
  };

  const generateInvoiceSummary = async () => {
    setLoadingSummary(true);
    try {
        const apiKey = "";
        
        // Wenn kein API-Key vorhanden ist, verwende Fallback-Zusammenfassung
        if (!apiKey) {
            const fallbackSummary = `• Rechnungssteller: ${formData.senderName}
• Rechnungsempfänger: ${formData.recipientName}
• Rechnungsnummer: ${formData.reference}
• Gesamtbrutto: ${formData.grossAmount} ${formData.invoiceCurrencyCode}
• Rechnungsdatum: ${formatDate(formData.invoiceDate)}
• Leistungsdatum: ${formatDate(formData.serviceDate)}
• Anzahl Positionen: ${formData.lineItems.length}`;
            setInvoiceSummary(fallbackSummary);
            return true;
        }

        const prompt = `Fasse die folgenden Rechnungsdaten in Stichpunkten zusammen. Nur Fakten, kein Einleitungssatz, keine Erklärungen.
- Rechnungssteller: ${formData.senderName}
- Rechnungsempfänger: ${formData.recipientName}
- Rechnungsnummer: ${formData.reference}
- Gesamtbrutto: ${formData.grossAmount} ${formData.invoiceCurrencyCode}
        `;

        const chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
        const payload = { contents: chatHistory };
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
        const result = await response.json();
        const summary = result?.candidates?.[0]?.content?.parts?.[0]?.text;
        if(summary) {
            setInvoiceSummary(summary);
            return true;
        } else {
            throw new Error("Keine Zusammenfassung erhalten.");
        }
    } catch (error) {
        console.error("Fehler bei der Erstellung der Zusammenfassung:", error);
        // Fallback-Zusammenfassung bei Fehlern
        const fallbackSummary = `• Rechnungssteller: ${formData.senderName}
• Rechnungsempfänger: ${formData.recipientName}
• Rechnungsnummer: ${formData.reference}
• Gesamtbrutto: ${formData.grossAmount} ${formData.invoiceCurrencyCode}
• Rechnungsdatum: ${formatDate(formData.invoiceDate)}
• Leistungsdatum: ${formatDate(formData.serviceDate)}`;
        setInvoiceSummary(fallbackSummary);
        return true; // Gib true zurück, da wir eine Fallback-Zusammenfassung haben
    } finally {
        setLoadingSummary(false);
    }
  };
  
  const handleOpenSapModal = async () => {
    // Öffne das Modal immer, auch wenn die KI-Zusammenfassung fehlschlägt
    setShowSapIdModal(true);
    
    // Versuche die KI-Zusammenfassung zu generieren, aber blockiere das Modal nicht
    try {
      await generateInvoiceSummary();
    } catch (error) {
      console.error("KI-Zusammenfassung fehlgeschlagen:", error);
      // Fallback-Zusammenfassung setzen
      const fallbackSummary = `• Rechnungssteller: ${formData.senderName}
• Rechnungsempfänger: ${formData.recipientName}
• Rechnungsnummer: ${formData.reference}
• Gesamtbrutto: ${formData.grossAmount} ${formData.invoiceCurrencyCode}
• Rechnungsdatum: ${formatDate(formData.invoiceDate)}
• Leistungsdatum: ${formatDate(formData.serviceDate)}`;
      setInvoiceSummary(fallbackSummary);
    }
  };


  
  const handleConfirmSapIdsAndGenerateXml = () => {
    setShowSapIdModal(false);
    setXrechnungXML('');
    
    // Verwende die neue hierarchische XML-Generierung mit aktuellen IDs
    const xmlString = generateSapXmlFromMapping(sapMapping, formData, {
      kreditorId: kreditorId,
      buchungskreisId: buchungskreisId
    });
    
    // Aktualisiere die SAP-XML Vorschau mit neuen IDs
    setSapXml(xmlString);
    setActiveXmlTab('sap'); // Automatisch zum SAP-Tab wechseln
    setDataSource('manual'); // Markiere als manuell generiert
    
    // Erfolgreiche Aktualisierung anzeigen
    showMessage(`SAP-XML mit Kreditor-ID "${kreditorId}" und Buchungskreis "${buchungskreisId}" erstellt.`, 'success');
  };

  const handleDownload = (content, filename, mimeType) => {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleCopy = (text) => {
    navigator.clipboard.writeText(text).then(() => {
        showMessage('XML in die Zwischenablage kopiert!', 'success');
    }).catch(err => {
        console.error('Fehler beim Kopieren: ', err);
        showMessage('Kopieren fehlgeschlagen.', 'error');
    });
  };
  

  
  const confirmRemoveRow = () => {
    if (rowToDelete) {
      const removeElement = (items) => {
        return items.filter(item => {
          if (item.id === rowToDelete) {
            return false;
          }
          if (item.children) {
            item.children = removeElement(item.children);
          }
          return true;
        });
      };

      setSapMapping(prev => removeElement(prev));
      setRowToDelete(null);
      showMessage('Element erfolgreich gelöscht!', 'success');
    }
    setShowDeleteModal(false);
  };
  

  
  // Hilfsfunktion für zufällige Auswahl aus Array
  // eslint-disable-next-line no-unused-vars
  const getRandomItem = (array) => array[Math.floor(Math.random() * array.length)];
  
  // Hilfsfunktion für zufällige Zahlen
  // eslint-disable-next-line no-unused-vars
  const getRandomNumber = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;
  




  const handlePrefill = async () => {
    setLoadingPrefill(true);
    setShowXRechnungButton(true); // XRechnung Button wieder einblenden bei KI-Werte
    setXrechnungTabEnabled(true); // XRechnung Tab wieder aktivieren
    showMessage('Generiere Zufallswerte...', 'info');
    try {
        // Simuliere kurze Ladezeit für bessere UX
        await new Promise(resolve => setTimeout(resolve, 500));
        
        const generatedData = (() => {
          const getRandomItem = (array) => array[Math.floor(Math.random() * array.length)];
          const getRandomNumber = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;
          const companies = ['TechSolutions GmbH', 'Digital Innovations AG', 'Moderne Systeme GmbH', 'Kreative Medien GmbH', 'Professionelle Dienste AG'];
          const cities = ['München', 'Hamburg', 'Berlin', 'Köln', 'Frankfurt', 'Stuttgart', 'Düsseldorf'];
          const streets = ['Hauptstraße', 'Bahnhofstraße', 'Kirchgasse', 'Schulstraße', 'Gartenweg'];
          const firstNames = ['Michael', 'Thomas', 'Andreas', 'Wolfgang', 'Klaus', 'Sabine', 'Petra'];
          const lastNames = ['Müller', 'Schmidt', 'Schneider', 'Fischer', 'Weber', 'Meyer', 'Wagner'];
          
          const senderCompany = getRandomItem(companies);
          const recipientCompany = getRandomItem(companies.filter(c => c !== senderCompany));
          const contactFirstName = getRandomItem(firstNames);
          const contactLastName = getRandomItem(lastNames);
          
          return {
            senderName: senderCompany,
            senderStreet: `${getRandomItem(streets)} ${getRandomNumber(1, 150)}`,
            senderZip: String(getRandomNumber(10000, 99999)),
            senderCity: getRandomItem(cities),
            senderTaxId: `DE${getRandomNumber(100000000, 999999999)}`,
            senderContactName: `${contactFirstName} ${contactLastName}`,
            senderContactPhone: `+49 ${getRandomNumber(30, 89)} ${getRandomNumber(10000000, 99999999)}`,
            senderContactEmail: `${contactFirstName.toLowerCase()}.${contactLastName.toLowerCase()}@example.de`,
            senderElectronicAddress: 'sender@company.de',
            recipientName: recipientCompany,
            recipientStreet: `${getRandomItem(streets)} ${getRandomNumber(1, 200)}`,
            recipientZip: String(getRandomNumber(10000, 99999)),
            recipientCity: getRandomItem(cities),
            recipientElectronicAddress: 'recipient@kunde.de',
            leitwegId: '99999999-ABCDEF',
            reference: `RE-${new Date().getFullYear()}-${String(getRandomNumber(1000, 9999))}`,
            invoiceDate: new Date(Date.now() - getRandomNumber(1, 30) * 24 * 60 * 60 * 1000).toISOString().slice(0, 10),
            iban: `DE${getRandomNumber(10, 99)}${String(getRandomNumber(10000000, 99999999))}${String(getRandomNumber(1000000000, 9999999999))}`,
            bic: `${getRandomItem(['DEUTDEFF', 'COBADEFF', 'DRESDEFF'])}${getRandomNumber(100, 999)}`,
            invoiceTypeCode: '380',
            invoiceCurrencyCode: 'EUR',
            paymentTerms: `Zahlbar innerhalb von ${getRandomNumber(14, 30)} Tagen ohne Abzug.`,
            paymentMeansCode: '58',
            // Neue optionale Felder (BT-9, BT-12, BT-13)
            paymentDueDate: new Date(Date.now() + getRandomNumber(14, 30) * 24 * 60 * 60 * 1000).toISOString().slice(0, 10),
            contractReference: `CONTRACT-${new Date().getFullYear()}-${String(getRandomNumber(100, 999))}`,
            orderReference: `PO-${new Date().getFullYear()}-${String(getRandomNumber(1000, 9999))}`,
            precedingInvoiceReference: '',
            documentLevelAllowance: '',
            documentLevelCharge: '',
            lineItems: (() => {
              const items = [];
              const services = [
                { name: 'Beratungsleistung', price: 125.00 },
                { name: 'Softwareentwicklung', price: 95.00 },
                { name: 'IT-Support', price: 85.00 }
              ];
              
              for (let i = 0; i < getRandomNumber(1, 3); i++) {
                const service = getRandomItem(services);
                const quantity = getRandomNumber(5, 40);
                const price = service.price;
                const netAmount = (quantity * price).toFixed(2);
                
                items.push({
                  id: i + 1,
                  name: service.name,
                  unitCode: 'HUR',
                  billedQuantity: String(quantity),
                  price: price.toFixed(2),
                  netAmount: netAmount
                });
              }
              return items;
            })()
          };
        })();
        const finalData = { ...generatedData, serviceDate: new Date().toISOString().slice(0, 10), taxRate: '19' };
        
        setFormData(prev => ({...prev, ...finalData}));
        setDataSource('ki'); // Markiere als KI-generierte Daten
        showMessage('Werte erfolgreich vorbefüllt!', 'success');
    } catch (error) {
        console.error("Fehler bei der Vorbefüllung:", error);
        showMessage('Fehler bei der Vorbefüllung mit Zufallswerten.', 'error');
    } finally {
        setLoadingPrefill(false);
    }
  };

  const handleReset = () => {
    // Erstelle komplett leere Formulardaten (ohne Defaults)
    const completelyBlankData = {
      senderName: '',
      senderStreet: '',
      senderZip: '',
      senderCity: '',
      senderCountry: '',
      senderTaxId: '',
      senderContactName: '',
      senderContactPhone: '',
      senderContactEmail: '',
      senderElectronicAddress: '',
      recipientName: '',
      recipientStreet: '',
      recipientZip: '',
      recipientCity: '',
      recipientCountry: '',
      recipientElectronicAddress: '',
      leitwegId: '',
      reference: '',
      invoiceDate: '',
      serviceDate: '',
      iban: '',
      bic: '',
      invoiceTypeCode: '',
      invoiceCurrencyCode: '',
      paymentTerms: '',
      paymentMeansCode: '',
      taxRate: '',
      lineItems: [
        { id: 1, name: '', unitCode: '', billedQuantity: '', netAmount: '', price: '' }
      ],
      totalNetAmount: '0.00',
      totalTaxAmount: '0.00',
      grossAmount: '0.00',
      orderReference: '',
      contractReference: '',
      precedingInvoiceReference: '',
      paymentDueDate: '',
      documentLevelAllowance: '',
      documentLevelCharge: '',
    };
    
    // Vollständiges Zurücksetzen aller States - Force Update
    setFormData(() => ({ ...completelyBlankData }));
    setXrechnungXML('');
    setEn16931XML('');
    setSapXml('');
    setShowXRechnungButton(true);
    setXrechnungTabEnabled(true);
    setUnmappedFields([]);
    setActiveXmlTab('xrechnung');
    setShowOptionalFields(false);
    setLoading(false);
    setLoadingPrefill(false);
    setLoadingSummary(false);
    
    // PDF-Vorschau vollständig zurücksetzen
    if (uploadedPdfData) {
      URL.revokeObjectURL(uploadedPdfData);
    }
    setUploadedPdfData(null);
    setShowPdfPreview(false);
    
    // File Input zurücksetzen
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
    
    // SAP-Daten zurücksetzen
    setKreditorId('');
    setBuchungskreisId('');
    setInvoiceSummary('');
    setDataSource(null); // Datenquelle zurücksetzen
    
    // Force Update für alle berechneten Felder
    setTimeout(() => {
      setFormData(prev => ({
        ...prev,
        totalNetAmount: '0.00',
        totalTaxAmount: '0.00',
        grossAmount: '0.00'
      }));
    }, 100);
    
    showMessage('Komplette Anwendung zurückgesetzt - alle Felder geleert.', 'success');
  };
  
  const renderLayoutSelectionPage = () => {
    const layouts = [
        { id: 'classic', name: 'Klassisch', description: 'Ein traditionelles und klares Design für formelle Anlässe.', imgSrc: 'https://placehold.co/400x566/333/FFF?text=Klassisch' },
        { id: 'modern', name: 'Modern', description: 'Großzügiger Weißraum und feine Linien für einen sauberen Look.', imgSrc: 'https://placehold.co/400x566/F3F4F6/111827?text=Modern' },
        { id: 'minimalist', name: 'Minimalistisch', description: 'Reduziert auf das Wesentliche mit Fokus auf Typografie.', imgSrc: 'https://placehold.co/400x566/FFF/111?text=Minimal' },
        { id: 'creative', name: 'Kreativ', description: 'Ein asymmetrisches Layout mit einer auffälligen Seitenleiste.', imgSrc: 'https://placehold.co/400x566/1F2937/FFF?text=Kreativ' },
    ];

    return (
        <div className="bg-white/30 backdrop-blur-xl border border-white/30 rounded-2xl shadow-lg w-full max-w-5xl mx-auto p-6 md:p-8">
            <div className="flex items-center justify-between border-b border-white/30 pb-4 mb-6">
                <h2 className="text-3xl font-bold text-gray-800">Layout auswählen</h2>
                <p className="text-gray-600">Wählen Sie eine Vorlage für die Rechnungsvorschau.</p>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                {layouts.map((layout) => (
                    <div key={layout.id} className="bg-white/30 border border-white/30 rounded-lg overflow-hidden group transform hover:-translate-y-2 transition-transform duration-300">
                        <img src={layout.imgSrc} alt={layout.name} className="w-full h-64 object-cover object-top" />
                        <div className="p-6">
                            <h3 className="text-xl font-semibold text-gray-800">{layout.name}</h3>
                            <p className="text-gray-600 mt-2 text-sm">{layout.description}</p>
                            <button 
                                onClick={() => { setSelectedLayout(layout.id); setCurrentPage('home'); }}
                                className="mt-4 w-full p-3 rounded-xl bg-blue-600 text-white font-semibold hover:bg-blue-700 transition-all duration-200"
                            >
                                Layout verwenden
                            </button>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
  };

  const renderERechnungMappingPage = () => (
    <div className="bg-white/30 backdrop-blur-xl border border-white/30 rounded-2xl shadow-lg w-full max-w-6xl mx-auto p-6 md:p-8">
        <div className="flex items-center justify-between border-b border-white/30 pb-2 mb-4">
            <h2 className="text-2xl font-semibold text-gray-800">E-Rechnungs-Mapping (EN 16931)</h2>
        </div>
        <p className="text-sm text-gray-600 mb-6">
            Diese Tabelle zeigt die Zuordnung der Formularfelder zu den Elementen der Standards XRechnung (UBL-Syntax) und ZUGFeRD (CII-Syntax). Beide basieren auf der Norm EN 16931.
        </p>
        <div className="overflow-x-auto">
            <table className="w-full table-auto border-collapse">
                <thead>
                    <tr className="border-b border-gray-300/50">
                        <th className="p-3 text-left font-medium text-gray-800">BT-ID</th>
                        <th className="p-3 text-left font-medium text-gray-800">EN 16931 (Grundformat)</th>
                        <th className="p-3 text-left font-medium text-gray-800">Beschreibung</th>
                        <th className="p-3 text-left font-medium text-gray-800">XRechnung (UBL)</th>
                        <th className="p-3 text-left font-medium text-gray-800">ZUGFeRD (CII)</th>
                    </tr>
                </thead>
                <tbody>
                    {eRechnungMappingData.map((row) => (
                        <tr key={row.id} className="border-b border-gray-300/30 hover:bg-white/20 transition-colors">
                            <td className="p-3 font-semibold text-gray-700">{row.btId}</td>
                            <td className="p-3 font-mono text-blue-600 text-xs">{row.en16931}</td>
                            <td className="p-3 text-gray-700">{row.description}</td>
                            <td className="p-3 font-mono text-gray-600 text-xs">{row.xrechnungPath}</td>
                            <td className="p-3 font-mono text-gray-600 text-xs">{row.zugferdPath}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    </div>
  );



  const renderSapMappingPage = () => (
    <div className="bg-white/30 backdrop-blur-xl border border-white/30 rounded-2xl shadow-lg w-full max-w-6xl mx-auto p-6 md:p-8 relative">
      <div className="flex items-center justify-between border-b border-white/30 pb-2 mb-4">
        <h2 className="text-2xl font-semibold text-gray-800">SAP-XML Struktur Designer</h2>
      </div>
      
      <p className="text-sm text-gray-600 mb-6">
        Die SAP-XML wird basierend auf der Standard-Struktur generiert. Die Live-Vorschau zeigt die aktuelle XML-Struktur an.
      </p>
      
      {/* Aktions-Buttons - nur noch SAP-XML erzeugen */}
      <div className="flex flex-wrap gap-4 mb-6">
        <button 
          onClick={handleOpenSapModal} 
          className="p-3 flex items-center justify-center space-x-2 rounded-xl bg-orange-600 text-white font-semibold hover:bg-orange-700 transition-colors shadow-md"
        >
          <Send size={20} />
          <span>SAP-XML erzeugen</span>
        </button>
      </div>

      {/* Vollständige Breite für Live XML-Vorschau */}
      <div className="w-full">
        <h3 className="text-lg font-semibold text-gray-800 mb-4">Live XML-Vorschau</h3>
        <div className="border border-gray-200 rounded-lg p-4 bg-gray-50 font-mono text-sm max-h-[600px] overflow-y-auto">
          <pre className="whitespace-pre-wrap text-gray-700 leading-tight">
            {sapMapping.length > 0 ? generateXmlPreview(sapMapping, formData, { kreditorId, buchungskreisId }) : '<!-- Keine Struktur definiert -->'}
          </pre>
        </div>
      </div>

      
      {/* Lösch-Modal */}
      {showDeleteModal && (
        <div className="fixed inset-0 bg-black bg-opacity-75 backdrop-blur-sm flex items-center justify-center z-50">
          <div className="bg-white/50 backdrop-blur-xl border border-white/30 rounded-lg p-6 shadow-xl w-80">
            <h3 className="text-xl font-semibold text-gray-800 mb-4">Element löschen</h3>
            <p className="text-gray-700 mb-6">
              Sind Sie sicher, dass Sie dieses Element löschen möchten? 
              Alle Unterelemente werden ebenfalls entfernt. Dieser Vorgang kann nicht rückgängig gemacht werden.
            </p>
            <div className="flex justify-end space-x-4">
              <button 
                onClick={() => setShowDeleteModal(false)} 
                className="px-4 py-2 rounded-lg bg-white/50 hover:bg-white/80 text-gray-700"
              >
                Abbrechen
              </button>
              <button 
                onClick={confirmRemoveRow} 
                className="px-4 py-2 rounded-lg bg-red-600 text-white hover:bg-red-700"
              >
                Löschen
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );

  const renderSapIdModal = () => (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
        <div className="bg-white/50 backdrop-blur-xl border border-white/30 rounded-2xl p-6 shadow-xl w-full max-w-3xl space-y-4 max-h-[90vh] overflow-y-auto">
            <h3 className="text-xl font-semibold text-gray-800">Zusätzliche SAP-Informationen & Rechnungsprüfung</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-2">
                    <h4 className="font-semibold text-gray-800 border-b border-white/30 pb-1">Rechnungsempfänger</h4>
                    <p className="text-sm text-gray-700"><span className="font-medium text-gray-600">Name:</span> {formData.recipientName}</p>
                    <p className="text-sm text-gray-700"><span className="font-medium text-gray-600">Adresse:</span> {formData.recipientStreet}, {formData.recipientZip} {formData.recipientCity}</p>
                    <div className="pt-2">
                        <label className="block text-sm font-medium text-gray-600 mb-1">Buchungskreisnummer</label>
                        <input type="text" value={buchungskreisId || ''} onChange={(e) => {
                          setBuchungskreisId(e.target.value);
                          // Live-Update der SAP-XML Vorschau
                          if (sapXml) {
                            const updatedXml = generateSapXmlFromMapping(sapMapping, formData, {
                              kreditorId: kreditorId,
                              buchungskreisId: e.target.value
                            });
                            setSapXml(updatedXml);
                          }
                        }} className="w-full p-3 rounded-xl bg-white/50 text-gray-800 border border-white/30 focus:outline-none focus:ring-2 focus:ring-blue-500" />
                    </div>
                </div>
                <div className="space-y-2">
                    <h4 className="font-semibold text-gray-800 border-b border-white/30 pb-1">Rechnungssteller</h4>
                    <p className="text-sm text-gray-700"><span className="font-medium text-gray-600">Name:</span> {formData.senderName}</p>
                    <p className="text-sm text-gray-700"><span className="font-medium text-gray-600">Adresse:</span> {formData.senderStreet}, {formData.senderZip} {formData.senderCity}</p>
                     <div className="pt-2">
                        <label className="block text-sm font-medium text-gray-600 mb-1">Kreditorennummer</label>
                        <input type="text" value={kreditorId || ''} onChange={(e) => {
                          setKreditorId(e.target.value);
                          // Live-Update der SAP-XML Vorschau
                          if (sapXml) {
                            const updatedXml = generateSapXmlFromMapping(sapMapping, formData, {
                              kreditorId: e.target.value,
                              buchungskreisId: buchungskreisId
                            });
                            setSapXml(updatedXml);
                          }
                        }} className="w-full p-3 rounded-xl bg-white/50 text-gray-800 border border-white/30 focus:outline-none focus:ring-2 focus:ring-blue-500" />
                    </div>
                </div>
            </div>
            <div className="space-y-2 pt-4">
                <h4 className="font-semibold text-gray-800 border-b border-white/30 pb-1">KI-Zusammenfassung</h4>
                <p className="text-sm text-gray-700 whitespace-pre-wrap">{invoiceSummary}</p>
            </div>
            <div className="flex justify-end space-x-4 pt-4">
                <button onClick={() => setShowSapIdModal(false)} className="px-4 py-2 rounded-xl bg-white/50 hover:bg-white/80 text-gray-700 font-semibold transition-colors">Abbrechen</button>
                <button onClick={handleConfirmSapIdsAndGenerateXml} className="px-4 py-2 rounded-xl bg-green-600 text-white font-semibold hover:bg-green-700 transition-colors">OK & Erzeugen</button>
            </div>
        </div>
    </div>
  );
  
  const renderCurrentPage = () => {
    switch (currentPage) {
        case 'home':
            return <HomePage
                formData={formData} formRef={formRef} previewContainerRef={previewContainerRef} previewContentRef={previewContentRef} previewTransform={previewTransform}
                loadingPrefill={loadingPrefill} handlePrefill={handlePrefill} handleReset={handleReset} handleUploadClick={handleUploadClick} fileInputRef={fileInputRef}
                handleFileUpload={handleFileUpload} handleInputChange={handleInputChange} handleLineItemChange={handleLineItemChange} addLineItem={addLineItem}
                removeLineItem={removeLineItem} loading={loading} generateXRechnungUBL={generateXRechnungUBL} loadingSummary={loadingSummary}
                handleOpenSapModal={handleOpenSapModal} sapXml={sapXml} handleCopy={handleCopy} handleDownload={handleDownload} xrechnungXML={xrechnungXML}
                en16931XML={en16931XML} selectedLayout={selectedLayout} unmappedFields={unmappedFields} activeXmlTab={activeXmlTab} setActiveXmlTab={setActiveXmlTab} setSapXml={setSapXml}
                setXrechnungXML={setXrechnungXML} setEn16931XML={setEn16931XML} dataSource={dataSource} showXRechnungButton={showXRechnungButton} xrechnungTabEnabled={xrechnungTabEnabled}
                showPdfPreview={showPdfPreview} uploadedPdfData={uploadedPdfData} showOptionalFields={showOptionalFields} setShowOptionalFields={setShowOptionalFields}
            />;
        case 'layoutSelection': return renderLayoutSelectionPage();
        case 'eRechnungMapping': return renderERechnungMappingPage();
        case 'sapMapping': return renderSapMappingPage();
        default: return <div>Seite nicht gefunden</div>;
    }
  };

  return (
    <div className="min-h-screen text-gray-800 font-sans app-background">
      <div id="feedback-overlay" className={`fixed inset-0 pointer-events-none z-[200] transition-all duration-500 ${uploadStatus === 'success' ? 'glow-success' : uploadStatus === 'incomplete' ? 'glow-incomplete' : 'opacity-0'}`} />
      <nav className="bg-white/60 backdrop-blur-xl border-b border-white/30 shadow-lg sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <h1 className="text-2xl font-bold text-gray-800 tracking-wider">mvp e-Rechnung DE</h1>
            <div className="flex items-center space-x-2">
              <button onClick={() => setCurrentPage('home')} className={`flex items-center space-x-2 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${currentPage === 'home' ? 'bg-blue-600 text-white' : 'text-gray-600 hover:bg-gray-200/80'}`}><Home size={18} /><span>Home</span></button>
              
              {/* Admin Dropdown Menu */}
              <div className="relative" ref={adminMenuRef}>
                <button 
                  onClick={() => setShowAdminMenu(!showAdminMenu)}
                  className={`flex items-center space-x-2 px-3 py-2 rounded-lg text-sm font-medium transition-colors ${['layoutSelection', 'eRechnungMapping', 'sapMapping'].includes(currentPage) ? 'bg-blue-600 text-white' : 'text-gray-600 hover:bg-gray-200/80'}`}
                >
                  <Settings size={18} />
                  <span>Admin</span>
                  <ChevronDown size={14} className={`transition-transform ${showAdminMenu ? 'rotate-180' : ''}`} />
                </button>
                
                {showAdminMenu && (
                  <div className="absolute top-full left-0 mt-1 w-48 bg-white/90 backdrop-blur-xl border border-white/30 rounded-lg shadow-lg py-1 z-50">
                    <button 
                      onClick={() => { setCurrentPage('layoutSelection'); setShowAdminMenu(false); }}
                      className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-100/80 flex items-center space-x-2 ${currentPage === 'layoutSelection' ? 'bg-blue-50 text-blue-600' : 'text-gray-700'}`}
                    >
                      <LayoutTemplate size={16} />
                      <span>Layout</span>
                    </button>
                    <button 
                      onClick={() => { setCurrentPage('eRechnungMapping'); setShowAdminMenu(false); }}
                      className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-100/80 flex items-center space-x-2 ${currentPage === 'eRechnungMapping' ? 'bg-blue-50 text-blue-600' : 'text-gray-700'}`}
                    >
                      <FileCode size={16} />
                      <span>E-Rechnungs-Mapping</span>
                    </button>
                    <button 
                      onClick={() => { setCurrentPage('sapMapping'); setShowAdminMenu(false); }}
                      className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-100/80 flex items-center space-x-2 ${currentPage === 'sapMapping' ? 'bg-blue-50 text-blue-600' : 'text-gray-700'}`}
                    >
                      <Table size={16} />
                      <span>SAP-Mapping</span>
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </nav>

      <main className="max-w-7xl mx-auto p-4 md:p-8">
        {message && (
          <div className={`fixed top-20 right-4 z-[100] p-4 rounded-lg shadow-lg flex items-start space-x-2 transition-all duration-300 backdrop-blur-xl border border-white/30 text-white ${messageType === 'success' ? 'bg-green-500/80' : messageType === 'error' ? 'bg-red-500/80' : 'bg-blue-500/80'}`}>
            {messageType === 'success' && <CheckCircle size={20} className="mt-1 flex-shrink-0" />}
            {messageType === 'error' && <AlertCircle size={20} className="mt-1 flex-shrink-0" />}
            {messageType === 'info' && <Info size={20} className="mt-1 flex-shrink-0" />}
            <span className="whitespace-pre-wrap">{message}</span>
          </div>
        )}

        {uploadStatus === 'success' && (
          <div className="fixed inset-0 z-40 overflow-hidden pointer-events-none">
            {/* Professionelle Erfolgs-Animation */}
            <div className="success-particles">
              {[...Array(30)].map((_, i) => (
                <div 
                  key={i} 
                  className="particle" 
                  style={{
                    left: `${Math.random() * 100}vw`, 
                    top: `${Math.random() * 100}vh`, 
                    animationDelay: `${Math.random() * 2}s`,
                    '--random-x': `${(Math.random() - 0.5) * 200}px`,
                    '--random-y': `${(Math.random() - 0.5) * 200}px`
                  }} 
                />
              ))}
            </div>
            
            {/* Zentrale Erfolgs-Nachricht */}
            <div className="success-message-overlay">
              <div className="success-checkmark">
                <CheckCircle size={64} />
              </div>
              <h3 className="success-title">Upload erfolgreich!</h3>
              <p className="success-subtitle">E-Rechnung wurde verarbeitet</p>
            </div>
          </div>
        )}

        {showSapIdModal && renderSapIdModal()}

        <div className="bg-white/30 backdrop-blur-xl border border-white/30 rounded-2xl shadow-lg p-6 md:p-10 mb-8">
          {renderCurrentPage()}
        </div>
      </main>

      <style>{`
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        body { font-family: 'Inter', sans-serif; }
        .app-background {
          background-image: url('https://images.unsplash.com/photo-1506744038136-46273834b3fb?q=80&w=2070&auto=format&fit=crop');
          background-size: cover; background-position: center; background-attachment: fixed;
        }
        .app-background::before {
          content: ''; position: fixed; top: 0; left: 0; right: 0; bottom: 0;
          background-color: rgba(0,0,0,0.1); z-index: -1;
        }
        .glow-success { box-shadow: inset 0 0 20px 10px rgba(74, 222, 128, 0.7); opacity: 1; }
        .glow-incomplete { box-shadow: inset 0 0 20px 10px rgba(239, 68, 68, 0.7); opacity: 1; }
        
        /* Professionelle Erfolgs-Animation */
        @keyframes particleFloat {
          0% { 
            transform: translateY(0) translateX(0) scale(0); 
            opacity: 1; 
          }
          50% { 
            transform: translateY(var(--random-y)) translateX(var(--random-x)) scale(1); 
            opacity: 0.8; 
          }
          100% { 
            transform: translateY(calc(var(--random-y) * 2)) translateX(calc(var(--random-x) * 2)) scale(0); 
            opacity: 0; 
          }
        }
        
        @keyframes fadeInScale {
          0% { 
            transform: scale(0.5) translateY(20px); 
            opacity: 0; 
          }
          100% { 
            transform: scale(1) translateY(0); 
            opacity: 1; 
          }
        }
        
        @keyframes checkmarkPulse {
          0%, 100% { transform: scale(1); }
          50% { transform: scale(1.1); }
        }
        
        .particle {
          position: absolute;
          width: 8px;
          height: 8px;
          background: linear-gradient(45deg, #10b981, #34d399);
          border-radius: 50%;
          animation: particleFloat 2s ease-out forwards;
          box-shadow: 0 0 10px rgba(16, 185, 129, 0.5);
        }
        
        .particle:nth-child(odd) {
          background: linear-gradient(45deg, #3b82f6, #60a5fa);
          box-shadow: 0 0 10px rgba(59, 130, 246, 0.5);
        }
        
        .success-message-overlay {
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          text-align: center;
          animation: fadeInScale 0.6s ease-out forwards;
          z-index: 50;
        }
        
        .success-checkmark {
          color: #10b981;
          margin-bottom: 1rem;
          animation: checkmarkPulse 1.5s ease-in-out infinite;
          filter: drop-shadow(0 4px 8px rgba(16, 185, 129, 0.3));
        }
        
        .success-title {
          font-size: 2rem;
          font-weight: bold;
          color: #1f2937;
          margin-bottom: 0.5rem;
          text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .success-subtitle {
          font-size: 1.125rem;
          color: #6b7280;
          font-weight: 500;
        }
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: transparent; }
        ::-webkit-scrollbar-thumb { background-color: rgba(0, 0, 0, 0.2); border-radius: 10px; border: 2px solid transparent; background-clip: content-box; }
        ::-webkit-scrollbar-thumb:hover { background-color: rgba(0, 0, 0, 0.4); }
      `}</style>
    </div>
  );
};

export default App;
// #endregion
